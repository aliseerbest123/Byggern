
ping pong test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00002272  00002306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800202  00800202  00002408  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045b7  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000198b  00000000  00000000  00006dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021a2  00000000  00000000  0000874a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000988  00000000  00000000  0000a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5a  00000000  00000000  0000b274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fca  00000000  00000000  0000bdce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000ed98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 02 	jmp	0x544	; 0x544 <__ctors_end>
       4:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       8:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
       c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      10:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      14:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      18:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      1c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      20:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      24:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      28:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      2c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      30:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      38:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      3c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      40:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      44:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      48:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      4c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      50:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      54:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      58:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      5c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      60:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      64:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      68:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>
      6c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <menu_init+0x2f4>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <emoji>:
     368:	30 30 fc 78 30 30 78 fc 30 30 20 38 fe 38 20 08     00.x00x.00 8.8 .
     378:	38 fe 38 08 7c d6 fe c6 7c 00 00 00 00 00 00 00     8.8.|...|.......
	...

00000544 <__ctors_end>:
     544:	11 24       	eor	r1, r1
     546:	1f be       	out	0x3f, r1	; 63
     548:	cf ef       	ldi	r28, 0xFF	; 255
     54a:	d4 e0       	ldi	r29, 0x04	; 4
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	cd bf       	out	0x3d, r28	; 61

00000550 <__do_copy_data>:
     550:	12 e0       	ldi	r17, 0x02	; 2
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b1 e0       	ldi	r27, 0x01	; 1
     556:	e2 e7       	ldi	r30, 0x72	; 114
     558:	f2 e2       	ldi	r31, 0x22	; 34
     55a:	02 c0       	rjmp	.+4      	; 0x560 <__do_copy_data+0x10>
     55c:	05 90       	lpm	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	a2 30       	cpi	r26, 0x02	; 2
     562:	b1 07       	cpc	r27, r17
     564:	d9 f7       	brne	.-10     	; 0x55c <__do_copy_data+0xc>

00000566 <__do_clear_bss>:
     566:	22 e0       	ldi	r18, 0x02	; 2
     568:	a2 e0       	ldi	r26, 0x02	; 2
     56a:	b2 e0       	ldi	r27, 0x02	; 2
     56c:	01 c0       	rjmp	.+2      	; 0x570 <.do_clear_bss_start>

0000056e <.do_clear_bss_loop>:
     56e:	1d 92       	st	X+, r1

00000570 <.do_clear_bss_start>:
     570:	aa 32       	cpi	r26, 0x2A	; 42
     572:	b2 07       	cpc	r27, r18
     574:	e1 f7       	brne	.-8      	; 0x56e <.do_clear_bss_loop>
     576:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <main>
     57a:	0c 94 37 11 	jmp	0x226e	; 0x226e <_exit>

0000057e <__bad_interrupt>:
     57e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000582 <CAN_init>:
 *
 * \retval void
 */
void CAN_init()
{
	spi_master_init(); // Initialize SPI
     582:	0e 94 b1 0b 	call	0x1762	; 0x1762 <spi_master_init>
	MCP_reset();	   // Send reset - command
     586:	0e 94 21 04 	call	0x842	; 0x842 <MCP_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9f e2       	ldi	r25, 0x2F	; 47
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <CAN_init+0xc>
     592:	00 c0       	rjmp	.+0      	; 0x594 <CAN_init+0x12>
     594:	00 00       	nop
	_delay_ms(10);

	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_CONFIG)
     596:	8e e0       	ldi	r24, 0x0E	; 14
     598:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <MCP_read>
     59c:	80 7e       	andi	r24, 0xE0	; 224
     59e:	80 38       	cpi	r24, 0x80	; 128
     5a0:	21 f0       	breq	.+8      	; 0x5aa <CAN_init+0x28>
	{
		printf("\n\nMCP2515 is NOT in configuration mode after reset !\n");
     5a2:	89 e0       	ldi	r24, 0x09	; 9
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <puts>
	}

	MCP_bit_modify(MCP_CNF3, 0x07, 0b00000111); // set Length = T_q and BRP
     5aa:	47 e0       	ldi	r20, 0x07	; 7
     5ac:	67 e0       	ldi	r22, 0x07	; 7
     5ae:	88 e2       	ldi	r24, 0x28	; 40
     5b0:	0e 94 09 04 	call	0x812	; 0x812 <MCP_bit_modify>
	MCP_bit_modify(MCP_CNF2, 0xFF, 0b10101100); // BTLMODE determined by CNF3, PS1 length and Propagation length
     5b4:	4c ea       	ldi	r20, 0xAC	; 172
     5b6:	6f ef       	ldi	r22, 0xFF	; 255
     5b8:	89 e2       	ldi	r24, 0x29	; 41
     5ba:	0e 94 09 04 	call	0x812	; 0x812 <MCP_bit_modify>
	MCP_bit_modify(MCP_CNF1, 0xFF, 0b00000011); // PS2 length
     5be:	43 e0       	ldi	r20, 0x03	; 3
     5c0:	6f ef       	ldi	r22, 0xFF	; 255
     5c2:	8a e2       	ldi	r24, 0x2A	; 42
     5c4:	0e 94 09 04 	call	0x812	; 0x812 <MCP_bit_modify>
	
	// interrupts
	MCP_write(MCP_CANINTE, 0x01);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	8b e2       	ldi	r24, 0x2B	; 43
     5cc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>

	MCP_write(MCP_CANCTRL, 0); // REQOP<2:0> = 000 = normal mode
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	8f e0       	ldi	r24, 0x0F	; 15
     5d4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>

	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_NORMAL)
     5d8:	8e e0       	ldi	r24, 0x0E	; 14
     5da:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <MCP_read>
     5de:	80 7e       	andi	r24, 0xE0	; 224
     5e0:	21 f0       	breq	.+8      	; 0x5ea <CAN_init+0x68>
	{
		printf("\n\nMCP2515 is NOT in normal mode !\n");
     5e2:	8e e3       	ldi	r24, 0x3E	; 62
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <puts>
     5ea:	08 95       	ret

000005ec <CAN_send_message>:
 * \param msg struct containing the message, its ID and its length
 *
 * \retval void
 */
void CAN_send_message(can_message msg)
{
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	2c 97       	sbiw	r28, 0x0c	; 12
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	e9 82       	std	Y+1, r14	; 0x01
     60a:	fa 82       	std	Y+2, r15	; 0x02
     60c:	0b 83       	std	Y+3, r16	; 0x03
     60e:	1c 83       	std	Y+4, r17	; 0x04
     610:	2d 83       	std	Y+5, r18	; 0x05
     612:	3e 83       	std	Y+6, r19	; 0x06
     614:	4f 83       	std	Y+7, r20	; 0x07
     616:	58 87       	std	Y+8, r21	; 0x08
     618:	69 87       	std	Y+9, r22	; 0x09
     61a:	7a 87       	std	Y+10, r23	; 0x0a
     61c:	8b 87       	std	Y+11, r24	; 0x0b
     61e:	9c 87       	std	Y+12, r25	; 0x0c
     620:	e9 80       	ldd	r14, Y+1	; 0x01
     622:	fa 80       	ldd	r15, Y+2	; 0x02
	// send length
	MCP_write(MCP_TXB0CTRL + 5, msg.length);
     624:	60 2f       	mov	r22, r16
     626:	85 e3       	ldi	r24, 0x35	; 53
     628:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>
	// send ID
	MCP_write(MCP_TXB0CTRL + 1, msg.ID >> 3);
     62c:	b7 01       	movw	r22, r14
     62e:	76 95       	lsr	r23
     630:	67 95       	ror	r22
     632:	76 95       	lsr	r23
     634:	67 95       	ror	r22
     636:	76 95       	lsr	r23
     638:	67 95       	ror	r22
     63a:	81 e3       	ldi	r24, 0x31	; 49
     63c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg.ID & 0b111) << 5);
     640:	6e 2d       	mov	r22, r14
     642:	62 95       	swap	r22
     644:	66 0f       	add	r22, r22
     646:	60 7e       	andi	r22, 0xE0	; 224
     648:	82 e3       	ldi	r24, 0x32	; 50
     64a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>

	// send data
	for (uint8_t i = 0; i < msg.length; i++)
     64e:	00 23       	and	r16, r16
     650:	79 f0       	breq	.+30     	; 0x670 <CAN_send_message+0x84>
     652:	7e 01       	movw	r14, r28
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1
     65a:	0a 5c       	subi	r16, 0xCA	; 202
     65c:	16 e3       	ldi	r17, 0x36	; 54
	{
		MCP_write(CAN_data_address + i, msg.data[i]);
     65e:	f7 01       	movw	r30, r14
     660:	61 91       	ld	r22, Z+
     662:	7f 01       	movw	r14, r30
     664:	81 2f       	mov	r24, r17
     666:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP_write>
     66a:	1f 5f       	subi	r17, 0xFF	; 255
	// send ID
	MCP_write(MCP_TXB0CTRL + 1, msg.ID >> 3);
	MCP_write(MCP_TXB0CTRL + 2, (msg.ID & 0b111) << 5);

	// send data
	for (uint8_t i = 0; i < msg.length; i++)
     66c:	10 13       	cpse	r17, r16
     66e:	f7 cf       	rjmp	.-18     	; 0x65e <CAN_send_message+0x72>
	{
		MCP_write(CAN_data_address + i, msg.data[i]);
	}

	MCP_request_to_send(0x1);
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <MCP_request_to_send>
}
     676:	2c 96       	adiw	r28, 0x0c	; 12
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <slider_binary_to_decimal>:
	if (vec.x >= threshold	&& vec.x >= abs(vec.y))		return RIGHT;
	if (vec.x <= -threshold	&& vec.x <= - abs(vec.y))	return LEFT;
	if (vec.y >= threshold	&& vec.y >= abs(vec.x))		return UP;
	if (vec.y <= -threshold	&& vec.y <= - abs(vec.x))	return DOWN;
	return NEUTRAL;
};
     690:	24 e6       	ldi	r18, 0x64	; 100
     692:	82 9f       	mul	r24, r18
     694:	c0 01       	movw	r24, r0
     696:	11 24       	eor	r1, r1
     698:	6f ef       	ldi	r22, 0xFF	; 255
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodhi4>
     6a0:	86 2f       	mov	r24, r22
     6a2:	08 95       	ret

000006a4 <joy_axis_binary_to_decimal>:
     6a4:	86 17       	cp	r24, r22
     6a6:	18 f0       	brcs	.+6      	; 0x6ae <joy_axis_binary_to_decimal+0xa>
     6a8:	96 2f       	mov	r25, r22
     6aa:	90 95       	com	r25
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <joy_axis_binary_to_decimal+0xc>
     6ae:	96 2f       	mov	r25, r22
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	26 1b       	sub	r18, r22
     6b6:	31 09       	sbc	r19, r1
     6b8:	84 e6       	ldi	r24, 0x64	; 100
     6ba:	82 9f       	mul	r24, r18
     6bc:	a0 01       	movw	r20, r0
     6be:	83 9f       	mul	r24, r19
     6c0:	50 0d       	add	r21, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	69 2f       	mov	r22, r25
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	ca 01       	movw	r24, r20
     6ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodhi4>
     6ce:	cb 01       	movw	r24, r22
     6d0:	08 95       	ret

000006d2 <get_vector_direction_from_binary>:
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	16 2f       	mov	r17, r22
     6da:	66 ea       	ldi	r22, 0xA6	; 166
     6dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joy_axis_binary_to_decimal>
     6e0:	ec 01       	movw	r28, r24
     6e2:	62 ea       	ldi	r22, 0xA2	; 162
     6e4:	81 2f       	mov	r24, r17
     6e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joy_axis_binary_to_decimal>
     6ea:	ae 01       	movw	r20, r28
     6ec:	bc 01       	movw	r22, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	ba 01       	movw	r22, r20
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	08 95       	ret

000006fa <get_btn_left>:

uint8_t get_btn_left() {
	if (PINB & (1 << PB0)) return 1;
     6fa:	86 b3       	in	r24, 0x16	; 22
	return 0;
};
     6fc:	81 70       	andi	r24, 0x01	; 1
     6fe:	08 95       	ret

00000700 <get_btn_right>:
uint8_t get_btn_right() {
	if (PINB & (1 << PB1)) return 1;
     700:	86 b3       	in	r24, 0x16	; 22
	return 0;
};
     702:	86 95       	lsr	r24
     704:	81 70       	andi	r24, 0x01	; 1
     706:	08 95       	ret

00000708 <get_slider_left>:



uint8_t get_slider_left() {
	ADC[0] = 0b10000011;
     708:	e0 e0       	ldi	r30, 0x00	; 0
     70a:	f4 e1       	ldi	r31, 0x14	; 20
     70c:	83 e8       	ldi	r24, 0x83	; 131
     70e:	80 83       	st	Z, r24
     710:	8c ec       	ldi	r24, 0xCC	; 204
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <get_slider_left+0xc>
     718:	00 c0       	rjmp	.+0      	; 0x71a <get_slider_left+0x12>
     71a:	00 00       	nop
	//_delay_ms(20);
	_delay_ms(1);
	uint8_t value = ADC[0];
	//_delay_ms(50);
	return value;
};
     71c:	80 81       	ld	r24, Z
     71e:	08 95       	ret

00000720 <get_slider_right>:
uint8_t get_slider_right() {
	ADC[0] = 0b10000010;
     720:	e0 e0       	ldi	r30, 0x00	; 0
     722:	f4 e1       	ldi	r31, 0x14	; 20
     724:	82 e8       	ldi	r24, 0x82	; 130
     726:	80 83       	st	Z, r24
     728:	8c ec       	ldi	r24, 0xCC	; 204
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <get_slider_right+0xc>
     730:	00 c0       	rjmp	.+0      	; 0x732 <get_slider_right+0x12>
     732:	00 00       	nop
	_delay_ms(1);
	uint8_t value = ADC[0];
	//_delay_ms(1);
	return value;
};
     734:	80 81       	ld	r24, Z
     736:	08 95       	ret

00000738 <get_joystick_x>:


uint8_t get_joystick_x() {
	ADC[4] = 0b10000001;
     738:	81 e8       	ldi	r24, 0x81	; 129
     73a:	80 93 04 14 	sts	0x1404, r24	; 0x801404 <__bss_end+0x11da>
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	9f e5       	ldi	r25, 0x5F	; 95
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <get_joystick_x+0xa>
     746:	00 c0       	rjmp	.+0      	; 0x748 <get_joystick_x+0x10>
     748:	00 00       	nop
	_delay_ms(20);
	uint8_t x_joy = ADC[0];
     74a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11d6>
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f0 ef       	ldi	r31, 0xF0	; 240
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <get_joystick_x+0x1a>
	_delay_ms(50);
	return x_joy;
};
     756:	08 95       	ret

00000758 <get_joystick_y>:

uint8_t get_joystick_y() {
	ADC[4] = 0b10000000;
     758:	80 e8       	ldi	r24, 0x80	; 128
     75a:	80 93 04 14 	sts	0x1404, r24	; 0x801404 <__bss_end+0x11da>
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	9f e5       	ldi	r25, 0x5F	; 95
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <get_joystick_y+0xa>
     766:	00 c0       	rjmp	.+0      	; 0x768 <get_joystick_y+0x10>
     768:	00 00       	nop
	_delay_ms(20);
	uint8_t y_joy = ADC[0];
     76a:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__bss_end+0x11d6>
     76e:	e0 e0       	ldi	r30, 0x00	; 0
     770:	f0 ef       	ldi	r31, 0xF0	; 240
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <get_joystick_y+0x1a>
	_delay_ms(50);
	return y_joy;
};
     776:	08 95       	ret

00000778 <init_IO>:


void init_IO() {
	DDRD |= (1 << PD5); // set pin D5 to output
     778:	8d 9a       	sbi	0x11, 5	; 17
	// WGMn3	WGMn2	WGMn1	WGMn0
	// 0		1		0		0		CTC		OCRnA	Imediate	Max
//	TCCR1A = 0b00000000;
//	TCCR1B = 0b00001010;
	
	TCCR1B |= (1 << WGM12);
     77a:	8e b5       	in	r24, 0x2e	; 46
     77c:	88 60       	ori	r24, 0x08	; 8
     77e:	8e bd       	out	0x2e, r24	; 46
//prescaler
	TCCR1B |= (1 << CS10);
     780:	8e b5       	in	r24, 0x2e	; 46
     782:	81 60       	ori	r24, 0x01	; 1
     784:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << CS11);
     786:	8e b5       	in	r24, 0x2e	; 46
     788:	8d 7f       	andi	r24, 0xFD	; 253
     78a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1 << CS12);
     78c:	8e b5       	in	r24, 0x2e	; 46
     78e:	8b 7f       	andi	r24, 0xFB	; 251
     790:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A |= (1 << COM1A0);
     792:	8f b5       	in	r24, 0x2f	; 47
     794:	80 64       	ori	r24, 0x40	; 64
     796:	8f bd       	out	0x2f, r24	; 47
	
	OCR1A = 0b00000001;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9b bd       	out	0x2b, r25	; 43
     79e:	8a bd       	out	0x2a, r24	; 42
     7a0:	08 95       	ret

000007a2 <MCP_read>:
	SPI_transmission(MCP_READ_STATUS);
	status = SPI_transmission(0xFF);

	PORTB |= (1 << PB4);
	return status;
}
     7a2:	cf 93       	push	r28
     7a4:	c8 2f       	mov	r28, r24
     7a6:	c4 98       	cbi	0x18, 4	; 24
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7ae:	8c 2f       	mov	r24, r28
     7b0:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7ba:	c4 9a       	sbi	0x18, 4	; 24
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <MCP_write>:
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	d8 2f       	mov	r29, r24
     7c6:	c6 2f       	mov	r28, r22
     7c8:	c4 98       	cbi	0x18, 4	; 24
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7d0:	8d 2f       	mov	r24, r29
     7d2:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7d6:	83 ec       	ldi	r24, 0xC3	; 195
     7d8:	99 e0       	ldi	r25, 0x09	; 9
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <MCP_write+0x1a>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <MCP_write+0x20>
     7e0:	00 00       	nop
     7e2:	8c 2f       	mov	r24, r28
     7e4:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     7e8:	c4 9a       	sbi	0x18, 4	; 24
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <MCP_request_to_send>:
     7f0:	c4 98       	cbi	0x18, 4	; 24
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	48 f0       	brcs	.+18     	; 0x808 <MCP_request_to_send+0x18>
     7f6:	85 e6       	ldi	r24, 0x65	; 101
     7f8:	8f 93       	push	r24
     7fa:	82 e7       	ldi	r24, 0x72	; 114
     7fc:	8f 93       	push	r24
     7fe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <printf>
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	03 c0       	rjmp	.+6      	; 0x80e <MCP_request_to_send+0x1e>
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
     80e:	c4 9a       	sbi	0x18, 4	; 24
     810:	08 95       	ret

00000812 <MCP_bit_modify>:
 * \param data what the modified bit is changed to
 *
 * \retval void.
 */
void MCP_bit_modify(char adress, char mask, char data)
{
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	18 2f       	mov	r17, r24
     81a:	d6 2f       	mov	r29, r22
     81c:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     81e:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmission(MCP_BITMOD);
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
	SPI_transmission(adress);
     826:	81 2f       	mov	r24, r17
     828:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
	SPI_transmission(mask);
     82c:	8d 2f       	mov	r24, r29
     82e:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
	SPI_transmission(data);
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
	PORTB |= (1 << PB4);
     838:	c4 9a       	sbi	0x18, 4	; 24
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	08 95       	ret

00000842 <MCP_reset>:
 *
 * \retval void.
 */
void MCP_reset()
{
	PORTB &= ~(1 << PB4);
     842:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmission(MCP_RESET);
     844:	80 ec       	ldi	r24, 0xC0	; 192
     846:	0e 94 b7 0b 	call	0x176e	; 0x176e <SPI_transmission>
	PORTB |= (1 << PB4);
     84a:	c4 9a       	sbi	0x18, 4	; 24
     84c:	08 95       	ret

0000084e <menu_init>:
 * \param void
 *
 * \retval void.
 */
void menu_init()
{
     84e:	2f 92       	push	r2
     850:	3f 92       	push	r3
     852:	4f 92       	push	r4
     854:	5f 92       	push	r5
     856:	6f 92       	push	r6
     858:	7f 92       	push	r7
     85a:	8f 92       	push	r8
     85c:	9f 92       	push	r9
     85e:	af 92       	push	r10
     860:	bf 92       	push	r11
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 d0       	rcall	.+0      	; 0x874 <menu_init+0x26>
     874:	00 d0       	rcall	.+0      	; 0x876 <menu_init+0x28>
     876:	00 d0       	rcall	.+0      	; 0x878 <menu_init+0x2a>
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
	struct node *play_ping, *high_scores, *options, *easy, *medium, *hard, *play_pong, *invert, *easy_pong, *medium_pong, *hard_pong, *High_Score_pong;

	play_ping = (struct node *)malloc(sizeof(struct node));
     87c:	8a e1       	ldi	r24, 0x1A	; 26
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     884:	9e 83       	std	Y+6, r25	; 0x06
     886:	8d 83       	std	Y+5, r24	; 0x05
	play_pong = (struct node *)malloc(sizeof(struct node));
     888:	8a e1       	ldi	r24, 0x1A	; 26
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     890:	4c 01       	movw	r8, r24
	options = (struct node *)malloc(sizeof(struct node));
     892:	8a e1       	ldi	r24, 0x1A	; 26
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     89a:	1c 01       	movw	r2, r24
	high_scores = (struct node *)malloc(sizeof(struct node));
     89c:	8a e1       	ldi	r24, 0x1A	; 26
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
	easy = (struct node *)malloc(sizeof(struct node));
     8a8:	8a e1       	ldi	r24, 0x1A	; 26
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8b0:	5c 01       	movw	r10, r24
	medium = (struct node *)malloc(sizeof(struct node));
     8b2:	8a e1       	ldi	r24, 0x1A	; 26
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8ba:	6c 01       	movw	r12, r24
	hard = (struct node *)malloc(sizeof(struct node));
     8bc:	8a e1       	ldi	r24, 0x1A	; 26
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8c4:	7c 01       	movw	r14, r24
	invert = (struct node *)malloc(sizeof(struct node));
     8c6:	8a e1       	ldi	r24, 0x1A	; 26
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8ce:	9c 83       	std	Y+4, r25	; 0x04
     8d0:	8b 83       	std	Y+3, r24	; 0x03
	easy_pong = (struct node *)malloc(sizeof(struct node));
     8d2:	8a e1       	ldi	r24, 0x1A	; 26
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8da:	8c 01       	movw	r16, r24
	medium_pong = (struct node *)malloc(sizeof(struct node));
     8dc:	8a e1       	ldi	r24, 0x1A	; 26
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8e4:	3c 01       	movw	r6, r24
	hard_pong = (struct node *)malloc(sizeof(struct node));
     8e6:	8a e1       	ldi	r24, 0x1A	; 26
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
     8ee:	2c 01       	movw	r4, r24
	High_Score_pong = (struct node *)malloc(sizeof(struct node));
     8f0:	8a e1       	ldi	r24, 0x1A	; 26
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     8f8:	ad 81       	ldd	r26, Y+5	; 0x05
     8fa:	be 81       	ldd	r27, Y+6	; 0x06
     8fc:	18 96       	adiw	r26, 0x08	; 8
     8fe:	2a e0       	ldi	r18, 0x0A	; 10
     900:	e0 e6       	ldi	r30, 0x60	; 96
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	2a 95       	dec	r18
     90a:	e1 f7       	brne	.-8      	; 0x904 <menu_init+0xb6>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     90c:	ed 81       	ldd	r30, Y+5	; 0x05
     90e:	fe 81       	ldd	r31, Y+6	; 0x06
     910:	17 82       	std	Z+7, r1	; 0x07
     912:	16 82       	std	Z+6, r1	; 0x06
	menu->next = next;
     914:	91 82       	std	Z+1, r9	; 0x01
     916:	80 82       	st	Z, r8
	menu->prev = prev;
     918:	13 82       	std	Z+3, r1	; 0x03
     91a:	12 82       	std	Z+2, r1	; 0x02
	menu->child = child;
     91c:	b5 82       	std	Z+5, r11	; 0x05
     91e:	a4 82       	std	Z+4, r10	; 0x04
	menu->ID = ID;
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	31 8f       	std	Z+25, r19	; 0x19
     926:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     928:	d4 01       	movw	r26, r8
     92a:	18 96       	adiw	r26, 0x08	; 8
     92c:	2a e0       	ldi	r18, 0x0A	; 10
     92e:	ea e6       	ldi	r30, 0x6A	; 106
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	01 90       	ld	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	2a 95       	dec	r18
     938:	e1 f7       	brne	.-8      	; 0x932 <menu_init+0xe4>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     93a:	f4 01       	movw	r30, r8
     93c:	17 82       	std	Z+7, r1	; 0x07
     93e:	16 82       	std	Z+6, r1	; 0x06
	menu->next = next;
     940:	31 82       	std	Z+1, r3	; 0x01
     942:	20 82       	st	Z, r2
	menu->prev = prev;
     944:	2d 81       	ldd	r18, Y+5	; 0x05
     946:	3e 81       	ldd	r19, Y+6	; 0x06
     948:	33 83       	std	Z+3, r19	; 0x03
     94a:	22 83       	std	Z+2, r18	; 0x02
	menu->child = child;
     94c:	15 83       	std	Z+5, r17	; 0x05
     94e:	04 83       	std	Z+4, r16	; 0x04
	menu->ID = ID;
     950:	22 e0       	ldi	r18, 0x02	; 2
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	31 8f       	std	Z+25, r19	; 0x19
     956:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     958:	d1 01       	movw	r26, r2
     95a:	18 96       	adiw	r26, 0x08	; 8
     95c:	28 e0       	ldi	r18, 0x08	; 8
     95e:	e4 e7       	ldi	r30, 0x74	; 116
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	01 90       	ld	r0, Z+
     964:	0d 92       	st	X+, r0
     966:	2a 95       	dec	r18
     968:	e1 f7       	brne	.-8      	; 0x962 <menu_init+0x114>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     96a:	f1 01       	movw	r30, r2
     96c:	17 82       	std	Z+7, r1	; 0x07
     96e:	16 82       	std	Z+6, r1	; 0x06
	menu->next = next;
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
	menu->prev = prev;
     974:	93 82       	std	Z+3, r9	; 0x03
     976:	82 82       	std	Z+2, r8	; 0x02
	menu->child = child;
     978:	2b 81       	ldd	r18, Y+3	; 0x03
     97a:	3c 81       	ldd	r19, Y+4	; 0x04
     97c:	35 83       	std	Z+5, r19	; 0x05
     97e:	24 83       	std	Z+4, r18	; 0x04
	menu->ID = ID;
     980:	23 e0       	ldi	r18, 0x03	; 3
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	31 8f       	std	Z+25, r19	; 0x19
     986:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     988:	a9 81       	ldd	r26, Y+1	; 0x01
     98a:	ba 81       	ldd	r27, Y+2	; 0x02
     98c:	18 96       	adiw	r26, 0x08	; 8
     98e:	2c e0       	ldi	r18, 0x0C	; 12
     990:	ec e7       	ldi	r30, 0x7C	; 124
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	01 90       	ld	r0, Z+
     996:	0d 92       	st	X+, r0
     998:	2a 95       	dec	r18
     99a:	e1 f7       	brne	.-8      	; 0x994 <menu_init+0x146>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     99c:	2d 81       	ldd	r18, Y+5	; 0x05
     99e:	3e 81       	ldd	r19, Y+6	; 0x06
     9a0:	e9 81       	ldd	r30, Y+1	; 0x01
     9a2:	fa 81       	ldd	r31, Y+2	; 0x02
     9a4:	37 83       	std	Z+7, r19	; 0x07
     9a6:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     9a8:	11 82       	std	Z+1, r1	; 0x01
     9aa:	10 82       	st	Z, r1
	menu->prev = prev;
     9ac:	f3 82       	std	Z+3, r15	; 0x03
     9ae:	e2 82       	std	Z+2, r14	; 0x02
	menu->child = child;
     9b0:	15 82       	std	Z+5, r1	; 0x05
     9b2:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     9b4:	24 e0       	ldi	r18, 0x04	; 4
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	31 8f       	std	Z+25, r19	; 0x19
     9ba:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     9bc:	d5 01       	movw	r26, r10
     9be:	18 96       	adiw	r26, 0x08	; 8
     9c0:	25 e0       	ldi	r18, 0x05	; 5
     9c2:	e8 e8       	ldi	r30, 0x88	; 136
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	01 90       	ld	r0, Z+
     9c8:	0d 92       	st	X+, r0
     9ca:	2a 95       	dec	r18
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <menu_init+0x178>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     9ce:	2d 81       	ldd	r18, Y+5	; 0x05
     9d0:	3e 81       	ldd	r19, Y+6	; 0x06
     9d2:	f5 01       	movw	r30, r10
     9d4:	37 83       	std	Z+7, r19	; 0x07
     9d6:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     9d8:	d1 82       	std	Z+1, r13	; 0x01
     9da:	c0 82       	st	Z, r12
	menu->prev = prev;
     9dc:	13 82       	std	Z+3, r1	; 0x03
     9de:	12 82       	std	Z+2, r1	; 0x02
	menu->child = child;
     9e0:	15 82       	std	Z+5, r1	; 0x05
     9e2:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     9e4:	25 e0       	ldi	r18, 0x05	; 5
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	31 8f       	std	Z+25, r19	; 0x19
     9ea:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     9ec:	d6 01       	movw	r26, r12
     9ee:	18 96       	adiw	r26, 0x08	; 8
     9f0:	27 e0       	ldi	r18, 0x07	; 7
     9f2:	ed e8       	ldi	r30, 0x8D	; 141
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	01 90       	ld	r0, Z+
     9f8:	0d 92       	st	X+, r0
     9fa:	2a 95       	dec	r18
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <menu_init+0x1a8>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     9fe:	2d 81       	ldd	r18, Y+5	; 0x05
     a00:	3e 81       	ldd	r19, Y+6	; 0x06
     a02:	f6 01       	movw	r30, r12
     a04:	37 83       	std	Z+7, r19	; 0x07
     a06:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     a08:	f1 82       	std	Z+1, r15	; 0x01
     a0a:	e0 82       	st	Z, r14
	menu->prev = prev;
     a0c:	b3 82       	std	Z+3, r11	; 0x03
     a0e:	a2 82       	std	Z+2, r10	; 0x02
	menu->child = child;
     a10:	15 82       	std	Z+5, r1	; 0x05
     a12:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     a14:	26 e0       	ldi	r18, 0x06	; 6
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	31 8f       	std	Z+25, r19	; 0x19
     a1a:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     a1c:	d7 01       	movw	r26, r14
     a1e:	18 96       	adiw	r26, 0x08	; 8
     a20:	25 e0       	ldi	r18, 0x05	; 5
     a22:	e4 e9       	ldi	r30, 0x94	; 148
     a24:	f1 e0       	ldi	r31, 0x01	; 1
     a26:	01 90       	ld	r0, Z+
     a28:	0d 92       	st	X+, r0
     a2a:	2a 95       	dec	r18
     a2c:	e1 f7       	brne	.-8      	; 0xa26 <menu_init+0x1d8>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     a2e:	2d 81       	ldd	r18, Y+5	; 0x05
     a30:	3e 81       	ldd	r19, Y+6	; 0x06
     a32:	f7 01       	movw	r30, r14
     a34:	37 83       	std	Z+7, r19	; 0x07
     a36:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     a38:	29 81       	ldd	r18, Y+1	; 0x01
     a3a:	3a 81       	ldd	r19, Y+2	; 0x02
     a3c:	31 83       	std	Z+1, r19	; 0x01
     a3e:	20 83       	st	Z, r18
	menu->prev = prev;
     a40:	d3 82       	std	Z+3, r13	; 0x03
     a42:	c2 82       	std	Z+2, r12	; 0x02
	menu->child = child;
     a44:	15 82       	std	Z+5, r1	; 0x05
     a46:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     a48:	27 e0       	ldi	r18, 0x07	; 7
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	31 8f       	std	Z+25, r19	; 0x19
     a4e:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     a50:	ab 81       	ldd	r26, Y+3	; 0x03
     a52:	bc 81       	ldd	r27, Y+4	; 0x04
     a54:	18 96       	adiw	r26, 0x08	; 8
     a56:	2e e0       	ldi	r18, 0x0E	; 14
     a58:	e9 e9       	ldi	r30, 0x99	; 153
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	01 90       	ld	r0, Z+
     a5e:	0d 92       	st	X+, r0
     a60:	2a 95       	dec	r18
     a62:	e1 f7       	brne	.-8      	; 0xa5c <menu_init+0x20e>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     a64:	2d 81       	ldd	r18, Y+5	; 0x05
     a66:	3e 81       	ldd	r19, Y+6	; 0x06
     a68:	eb 81       	ldd	r30, Y+3	; 0x03
     a6a:	fc 81       	ldd	r31, Y+4	; 0x04
     a6c:	37 83       	std	Z+7, r19	; 0x07
     a6e:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     a70:	11 82       	std	Z+1, r1	; 0x01
     a72:	10 82       	st	Z, r1
	menu->prev = prev;
     a74:	13 82       	std	Z+3, r1	; 0x03
     a76:	12 82       	std	Z+2, r1	; 0x02
	menu->child = child;
     a78:	15 82       	std	Z+5, r1	; 0x05
     a7a:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     a7c:	29 e0       	ldi	r18, 0x09	; 9
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	31 8f       	std	Z+25, r19	; 0x19
     a82:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     a84:	d8 01       	movw	r26, r16
     a86:	18 96       	adiw	r26, 0x08	; 8
     a88:	25 e0       	ldi	r18, 0x05	; 5
     a8a:	e8 e8       	ldi	r30, 0x88	; 136
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	2a 95       	dec	r18
     a94:	e1 f7       	brne	.-8      	; 0xa8e <menu_init+0x240>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     a96:	2d 81       	ldd	r18, Y+5	; 0x05
     a98:	3e 81       	ldd	r19, Y+6	; 0x06
     a9a:	f8 01       	movw	r30, r16
     a9c:	37 83       	std	Z+7, r19	; 0x07
     a9e:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     aa0:	71 82       	std	Z+1, r7	; 0x01
     aa2:	60 82       	st	Z, r6
	menu->prev = prev;
     aa4:	13 82       	std	Z+3, r1	; 0x03
     aa6:	12 82       	std	Z+2, r1	; 0x02
	menu->child = child;
     aa8:	15 82       	std	Z+5, r1	; 0x05
     aaa:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     aac:	2a e0       	ldi	r18, 0x0A	; 10
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	31 8f       	std	Z+25, r19	; 0x19
     ab2:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     ab4:	d3 01       	movw	r26, r6
     ab6:	18 96       	adiw	r26, 0x08	; 8
     ab8:	27 e0       	ldi	r18, 0x07	; 7
     aba:	ed e8       	ldi	r30, 0x8D	; 141
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
     ac2:	2a 95       	dec	r18
     ac4:	e1 f7       	brne	.-8      	; 0xabe <menu_init+0x270>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     ac6:	2d 81       	ldd	r18, Y+5	; 0x05
     ac8:	3e 81       	ldd	r19, Y+6	; 0x06
     aca:	f3 01       	movw	r30, r6
     acc:	37 83       	std	Z+7, r19	; 0x07
     ace:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     ad0:	51 82       	std	Z+1, r5	; 0x01
     ad2:	40 82       	st	Z, r4
	menu->prev = prev;
     ad4:	13 83       	std	Z+3, r17	; 0x03
     ad6:	02 83       	std	Z+2, r16	; 0x02
	menu->child = child;
     ad8:	15 82       	std	Z+5, r1	; 0x05
     ada:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     adc:	2b e0       	ldi	r18, 0x0B	; 11
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	31 8f       	std	Z+25, r19	; 0x19
     ae2:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     ae4:	d2 01       	movw	r26, r4
     ae6:	18 96       	adiw	r26, 0x08	; 8
     ae8:	25 e0       	ldi	r18, 0x05	; 5
     aea:	e4 e9       	ldi	r30, 0x94	; 148
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	01 90       	ld	r0, Z+
     af0:	0d 92       	st	X+, r0
     af2:	2a 95       	dec	r18
     af4:	e1 f7       	brne	.-8      	; 0xaee <menu_init+0x2a0>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     af6:	2d 81       	ldd	r18, Y+5	; 0x05
     af8:	3e 81       	ldd	r19, Y+6	; 0x06
     afa:	f2 01       	movw	r30, r4
     afc:	37 83       	std	Z+7, r19	; 0x07
     afe:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
	menu->prev = prev;
     b04:	73 82       	std	Z+3, r7	; 0x03
     b06:	62 82       	std	Z+2, r6	; 0x02
	menu->child = child;
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     b0c:	2c e0       	ldi	r18, 0x0C	; 12
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	31 8f       	std	Z+25, r19	; 0x19
     b12:	20 8f       	std	Z+24, r18	; 0x18
 *
 * \retval menu finished filling inn all the values.
 */
struct node *new_menu(struct node *menu, char name[], struct node *parent, struct node *next, struct node *prev, struct node *child, int16_t ID)
{
	strcpy(menu->name, name);
     b14:	dc 01       	movw	r26, r24
     b16:	18 96       	adiw	r26, 0x08	; 8
     b18:	ec e7       	ldi	r30, 0x7C	; 124
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	2a 95       	dec	r18
     b22:	e1 f7       	brne	.-8      	; 0xb1c <menu_init+0x2ce>
	//	menu->name[strlen(name)]=name;
	menu->parent = parent;
     b24:	2d 81       	ldd	r18, Y+5	; 0x05
     b26:	3e 81       	ldd	r19, Y+6	; 0x06
     b28:	fc 01       	movw	r30, r24
     b2a:	37 83       	std	Z+7, r19	; 0x07
     b2c:	26 83       	std	Z+6, r18	; 0x06
	menu->next = next;
     b2e:	11 82       	std	Z+1, r1	; 0x01
     b30:	10 82       	st	Z, r1
	menu->prev = prev;
     b32:	53 82       	std	Z+3, r5	; 0x03
     b34:	42 82       	std	Z+2, r4	; 0x02
	menu->child = child;
     b36:	15 82       	std	Z+5, r1	; 0x05
     b38:	14 82       	std	Z+4, r1	; 0x04
	menu->ID = ID;
     b3a:	2d e0       	ldi	r18, 0x0D	; 13
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	31 8f       	std	Z+25, r19	; 0x19
     b40:	20 8f       	std	Z+24, r18	; 0x18
	
	hard_pong = new_menu(hard_pong, "Hard", play_ping, High_Score_pong, medium_pong, NULL, 12);
	
	High_Score_pong = new_menu(High_Score_pong, "High Scores", play_ping, NULL, hard_pong, NULL, 13);

	head = play_ping;
     b42:	8d 81       	ldd	r24, Y+5	; 0x05
     b44:	9e 81       	ldd	r25, Y+6	; 0x06
     b46:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <head+0x1>
     b4a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <head>
	current = play_ping;
     b4e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <current+0x1>
     b52:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <current>
}
     b56:	26 96       	adiw	r28, 0x06	; 6
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret

00000b88 <display>:
 * \param void
 *
 * \retval void.
 */
void display()
{
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
	OLED_reset_sram();
     b8e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
	uint8_t current_line = 0;
	struct node *node;
	node = head;
     b92:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <head>
     b96:	d0 91 1d 02 	lds	r29, 0x021D	; 0x80021d <head+0x1>
	while (node != NULL)
     b9a:	20 97       	sbiw	r28, 0x00	; 0
     b9c:	e1 f0       	breq	.+56     	; 0xbd6 <display+0x4e>
     b9e:	10 e0       	ldi	r17, 0x00	; 0
	{
		++current_line;
     ba0:	1f 5f       	subi	r17, 0xFF	; 255
     ba2:	2f ef       	ldi	r18, 0xFF	; 255
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	90 40       	sbci	r25, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <display+0x20>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <display+0x2a>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <display+0x2c>
		_delay_ms(400);
		OLED_print_to_sram(node->name, current_line, 3);
     bb4:	43 e0       	ldi	r20, 0x03	; 3
     bb6:	61 2f       	mov	r22, r17
     bb8:	ce 01       	movw	r24, r28
     bba:	08 96       	adiw	r24, 0x08	; 8
     bbc:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
		OLED_draw_from_sram(INVERT_FLAG);
     bc0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     bc4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     bc8:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
		node = node->next;
     bcc:	09 90       	ld	r0, Y+
     bce:	d8 81       	ld	r29, Y
     bd0:	c0 2d       	mov	r28, r0
{
	OLED_reset_sram();
	uint8_t current_line = 0;
	struct node *node;
	node = head;
	while (node != NULL)
     bd2:	20 97       	sbiw	r28, 0x00	; 0
     bd4:	29 f7       	brne	.-54     	; 0xba0 <display+0x18>
		_delay_ms(400);
		OLED_print_to_sram(node->name, current_line, 3);
		OLED_draw_from_sram(INVERT_FLAG);
		node = node->next;
	}
	OLED_print_emoji_sram(0, arrow_line, 10);
     bd6:	4a e0       	ldi	r20, 0x0A	; 10
     bd8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <arrow_line>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <OLED_print_emoji_sram>
	OLED_draw_from_sram(INVERT_FLAG);
     be2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     be6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     bea:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
	return;
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	08 95       	ret

00000bf6 <update_current_next>:
 *
 * \retval void.
 */
void update_current_next()
{
	current = current->next;
     bf6:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     bfa:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <current+0x1>
     c06:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <current>
     c0a:	08 95       	ret

00000c0c <update_display_next>:
 * \param void
 *
 * \retval void.
 */
void update_display_next()
{
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
	if (current->next == NULL)
     c12:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     c16:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	89 2b       	or	r24, r25
     c20:	89 f1       	breq	.+98     	; 0xc84 <update_display_next+0x78>
	{
		return;
	}
	update_current_next();
     c22:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <update_current_next>
	OLED_reset_sram();
     c26:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
	arrow_line++;
     c2a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <arrow_line>
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <arrow_line>
	uint8_t current_line = 0;
	struct node *node;
	node = head;
     c34:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <head>
     c38:	d0 91 1d 02 	lds	r29, 0x021D	; 0x80021d <head+0x1>
	while (node != NULL)
     c3c:	20 97       	sbiw	r28, 0x00	; 0
     c3e:	b1 f0       	breq	.+44     	; 0xc6c <update_display_next+0x60>
     c40:	10 e0       	ldi	r17, 0x00	; 0
	{
		++current_line;
     c42:	1f 5f       	subi	r17, 0xFF	; 255
		OLED_print_to_sram(node->name, current_line, 3);
     c44:	43 e0       	ldi	r20, 0x03	; 3
     c46:	61 2f       	mov	r22, r17
     c48:	ce 01       	movw	r24, r28
     c4a:	08 96       	adiw	r24, 0x08	; 8
     c4c:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
		OLED_draw_from_sram(INVERT_FLAG);
     c50:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     c54:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     c58:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
		node = node->next;
     c5c:	09 90       	ld	r0, Y+
     c5e:	d8 81       	ld	r29, Y
     c60:	c0 2d       	mov	r28, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <update_display_next+0x58>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <update_display_next+0x5a>
     c66:	00 00       	nop
	OLED_reset_sram();
	arrow_line++;
	uint8_t current_line = 0;
	struct node *node;
	node = head;
	while (node != NULL)
     c68:	20 97       	sbiw	r28, 0x00	; 0
     c6a:	59 f7       	brne	.-42     	; 0xc42 <update_display_next+0x36>
		OLED_print_to_sram(node->name, current_line, 3);
		OLED_draw_from_sram(INVERT_FLAG);
		node = node->next;
		_delay_us(1);
	}
	OLED_print_emoji_sram(0, arrow_line, 10);
     c6c:	4a e0       	ldi	r20, 0x0A	; 10
     c6e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <arrow_line>
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <OLED_print_emoji_sram>
	OLED_draw_from_sram(INVERT_FLAG);
     c78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     c7c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     c80:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
	return;
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	08 95       	ret

00000c8c <update_current_prev>:
 *
 * \retval void.
 */
void update_current_prev()
{
	current = current->prev;
     c8c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     c90:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <current+0x1>
     c9c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <current>
     ca0:	08 95       	ret

00000ca2 <update_display_prev>:
 * \param void
 *
 * \retval void.
 */
void update_display_prev()
{
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
	if (current->prev == NULL)
     ca8:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     cac:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	93 81       	ldd	r25, Z+3	; 0x03
     cb4:	89 2b       	or	r24, r25
     cb6:	89 f1       	breq	.+98     	; 0xd1a <update_display_prev+0x78>
	{
		return;
	}
	update_current_prev();
     cb8:	0e 94 46 06 	call	0xc8c	; 0xc8c <update_current_prev>
	OLED_reset_sram();
     cbc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
	--arrow_line;
     cc0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <arrow_line>
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <arrow_line>
	uint8_t current_line = 0;
	struct node *node;
	node = head;
     cca:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <head>
     cce:	d0 91 1d 02 	lds	r29, 0x021D	; 0x80021d <head+0x1>
	while (node != NULL)
     cd2:	20 97       	sbiw	r28, 0x00	; 0
     cd4:	b1 f0       	breq	.+44     	; 0xd02 <update_display_prev+0x60>
     cd6:	10 e0       	ldi	r17, 0x00	; 0
	{
		++current_line;
     cd8:	1f 5f       	subi	r17, 0xFF	; 255
		OLED_print_to_sram(node->name, current_line, 3);
     cda:	43 e0       	ldi	r20, 0x03	; 3
     cdc:	61 2f       	mov	r22, r17
     cde:	ce 01       	movw	r24, r28
     ce0:	08 96       	adiw	r24, 0x08	; 8
     ce2:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
		OLED_draw_from_sram(INVERT_FLAG);
     ce6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     cea:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     cee:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
		node = node->next;
     cf2:	09 90       	ld	r0, Y+
     cf4:	d8 81       	ld	r29, Y
     cf6:	c0 2d       	mov	r28, r0
     cf8:	84 ea       	ldi	r24, 0xA4	; 164
     cfa:	8a 95       	dec	r24
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <update_display_prev+0x58>
	OLED_reset_sram();
	--arrow_line;
	uint8_t current_line = 0;
	struct node *node;
	node = head;
	while (node != NULL)
     cfe:	20 97       	sbiw	r28, 0x00	; 0
     d00:	59 f7       	brne	.-42     	; 0xcd8 <update_display_prev+0x36>
		OLED_print_to_sram(node->name, current_line, 3);
		OLED_draw_from_sram(INVERT_FLAG);
		node = node->next;
		_delay_us(100);
	}
	OLED_print_emoji_sram(0, arrow_line, 10);
     d02:	4a e0       	ldi	r20, 0x0A	; 10
     d04:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <arrow_line>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <OLED_print_emoji_sram>
	OLED_draw_from_sram(INVERT_FLAG);
     d0e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     d12:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     d16:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
	return;
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	08 95       	ret

00000d22 <invert_screen>:
 * \param void
 *
 * \retval void.
 */
void invert_screen(){
	if (INVERT_FLAG)
     d22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <INVERT_FLAG>
     d26:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <INVERT_FLAG+0x1>
     d2a:	89 2b       	or	r24, r25
     d2c:	29 f0       	breq	.+10     	; 0xd38 <invert_screen+0x16>
	{
		INVERT_FLAG=0;
     d2e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <INVERT_FLAG+0x1>
     d32:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <INVERT_FLAG>
     d36:	08 95       	ret
	}
	else{
		INVERT_FLAG=1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <INVERT_FLAG+0x1>
     d40:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <INVERT_FLAG>
     d44:	08 95       	ret

00000d46 <go_back>:
 *
 * \retval void.
 */
void go_back()
{
	if (current->parent != NULL)
     d46:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     d4a:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     d4e:	86 81       	ldd	r24, Z+6	; 0x06
     d50:	97 81       	ldd	r25, Z+7	; 0x07
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	a9 f0       	breq	.+42     	; 0xd80 <go_back+0x3a>
	{
		head = current->parent;
     d56:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <head+0x1>
     d5a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <head>
		current = current->parent;
     d5e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <current+0x1>
     d62:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <current>
		arrow_line = 1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <arrow_line>
		OLED_reset_sram();
     d6c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	9f e2       	ldi	r25, 0x2F	; 47
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <go_back+0x2e>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <go_back+0x34>
     d7a:	00 00       	nop
		_delay_ms(10);
		display();
     d7c:	0e 94 c4 05 	call	0xb88	; 0xb88 <display>
     d80:	08 95       	ret

00000d82 <check_child>:
 *
 * \retval void.
 */
void check_child()
{
	if (current->child != NULL)
     d82:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     d86:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	95 81       	ldd	r25, Z+5	; 0x05
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	b1 f0       	breq	.+44     	; 0xdbe <check_child+0x3c>
	{
		head = current->child;
     d92:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <head+0x1>
     d96:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <head>
		current = current->child;
     d9a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <current+0x1>
     d9e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <current>
		arrow_line = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <arrow_line>
		OLED_reset_sram();
     da8:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	9f e2       	ldi	r25, 0x2F	; 47
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <check_child+0x2e>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <check_child+0x34>
     db6:	00 00       	nop
		_delay_ms(10);
		display();
     db8:	0e 94 c4 05 	call	0xb88	; 0xb88 <display>
     dbc:	08 95       	ret
	}
	else
	{
		printf(current->name);
     dbe:	38 96       	adiw	r30, 0x08	; 8
     dc0:	ff 93       	push	r31
     dc2:	ef 93       	push	r30
     dc4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <printf>
		if (current->ID == 5){
     dc8:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <current>
     dcc:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <current+0x1>
     dd0:	80 8d       	ldd	r24, Z+24	; 0x18
     dd2:	91 8d       	ldd	r25, Z+25	; 0x19
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	85 30       	cpi	r24, 0x05	; 5
     dda:	91 05       	cpc	r25, r1
     ddc:	39 f4       	brne	.+14     	; 0xdec <check_child+0x6a>
			play_ping(10);
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <play_ping>
			go_back();}
     de6:	0e 94 a3 06 	call	0xd46	; 0xd46 <go_back>
     dea:	08 95       	ret
		else if (current->ID == 6){
     dec:	86 30       	cpi	r24, 0x06	; 6
     dee:	91 05       	cpc	r25, r1
     df0:	39 f4       	brne	.+14     	; 0xe00 <check_child+0x7e>
			play_ping(11);
     df2:	8b e0       	ldi	r24, 0x0B	; 11
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <play_ping>
			go_back();}
     dfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <go_back>
     dfe:	08 95       	ret
		else if (current->ID == 7){
     e00:	87 30       	cpi	r24, 0x07	; 7
     e02:	91 05       	cpc	r25, r1
     e04:	39 f4       	brne	.+14     	; 0xe14 <check_child+0x92>
			play_ping(12);
     e06:	8c e0       	ldi	r24, 0x0C	; 12
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <play_ping>
			go_back();}
     e0e:	0e 94 a3 06 	call	0xd46	; 0xd46 <go_back>
     e12:	08 95       	ret
		else if (current->ID == 10)
     e14:	8a 30       	cpi	r24, 0x0A	; 10
     e16:	91 05       	cpc	r25, r1
     e18:	21 f4       	brne	.+8      	; 0xe22 <check_child+0xa0>
			play_pong(1);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <play_pong>
     e20:	08 95       	ret
		else if (current->ID == 11)
     e22:	8b 30       	cpi	r24, 0x0B	; 11
     e24:	91 05       	cpc	r25, r1
     e26:	21 f4       	brne	.+8      	; 0xe30 <check_child+0xae>
			play_pong(3);
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <play_pong>
     e2e:	08 95       	ret
		else if (current->ID == 12)
     e30:	8c 30       	cpi	r24, 0x0C	; 12
     e32:	91 05       	cpc	r25, r1
     e34:	21 f4       	brne	.+8      	; 0xe3e <check_child+0xbc>
			play_pong(4);
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <play_pong>
     e3c:	08 95       	ret
		else if (current->ID == 9)
     e3e:	89 30       	cpi	r24, 0x09	; 9
     e40:	91 05       	cpc	r25, r1
     e42:	19 f4       	brne	.+6      	; 0xe4a <check_child+0xc8>
			invert_screen();
     e44:	0e 94 91 06 	call	0xd22	; 0xd22 <invert_screen>
     e48:	08 95       	ret
		else if (current->ID == 13)
     e4a:	0d 97       	sbiw	r24, 0x0d	; 13
     e4c:	11 f4       	brne	.+4      	; 0xe52 <check_child+0xd0>
			print_score_history();
     e4e:	0e 94 05 0b 	call	0x160a	; 0x160a <print_score_history>
     e52:	08 95       	ret

00000e54 <OLED_goto_col>:
 * Find minimum between two numbers.
 */
int min(int num1, int num2)
{
	return (num1 > num2) ? num2 : num1;
}
     e54:	82 95       	swap	r24
     e56:	8f 70       	andi	r24, 0x0F	; 15
     e58:	80 61       	ori	r24, 0x10	; 16
     e5a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdd6>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <OLED_goto_col+0xc>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <OLED_goto_col+0xe>
     e62:	00 00       	nop
     e64:	08 95       	ret

00000e66 <OLED_pos>:
     e66:	e0 e0       	ldi	r30, 0x00	; 0
     e68:	f0 e1       	ldi	r31, 0x10	; 16
     e6a:	80 6b       	ori	r24, 0xB0	; 176
     e6c:	80 83       	st	Z, r24
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <OLED_pos+0xa>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <OLED_pos+0xc>
     e72:	00 00       	nop
     e74:	62 95       	swap	r22
     e76:	6f 70       	andi	r22, 0x0F	; 15
     e78:	60 61       	ori	r22, 0x10	; 16
     e7a:	60 83       	st	Z, r22
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <OLED_pos+0x18>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <OLED_pos+0x1a>
     e80:	00 00       	nop
     e82:	08 95       	ret

00000e84 <OLED_goto_line>:
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	0e 94 33 07 	call	0xe66	; 0xe66 <OLED_pos>
     e8a:	08 95       	ret

00000e8c <OLED_clear_line>:
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	0e 94 42 07 	call	0xe84	; 0xe84 <OLED_goto_line>
     e96:	c0 e0       	ldi	r28, 0x00	; 0
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	12 e1       	ldi	r17, 0x12	; 18
     e9c:	8c 2f       	mov	r24, r28
     e9e:	0e 94 2a 07 	call	0xe54	; 0xe54 <OLED_goto_col>
     ea2:	f8 01       	movw	r30, r16
     ea4:	10 82       	st	Z, r1
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
     ea8:	c0 38       	cpi	r28, 0x80	; 128
     eaa:	c1 f7       	brne	.-16     	; 0xe9c <OLED_clear_line+0x10>
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	08 95       	ret

00000eb4 <OLED_reset>:
     eb4:	cf 93       	push	r28
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 46 07 	call	0xe8c	; 0xe8c <OLED_clear_line>
     ebe:	cf 5f       	subi	r28, 0xFF	; 255
     ec0:	c8 30       	cpi	r28, 0x08	; 8
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <OLED_reset+0x4>
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 33 07 	call	0xe66	; 0xe66 <OLED_pos>
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <OLED_write_data_to_sram>:
     ed0:	28 e0       	ldi	r18, 0x08	; 8
     ed2:	82 9f       	mul	r24, r18
     ed4:	c0 01       	movw	r24, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	fc 01       	movw	r30, r24
     eda:	e0 59       	subi	r30, 0x90	; 144
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	68 9f       	mul	r22, r24
     ee4:	40 0d       	add	r20, r0
     ee6:	51 1d       	adc	r21, r1
     ee8:	11 24       	eor	r1, r1
     eea:	da 01       	movw	r26, r20
     eec:	b8 5e       	subi	r27, 0xE8	; 232
     eee:	48 5f       	subi	r20, 0xF8	; 248
     ef0:	57 4e       	sbci	r21, 0xE7	; 231
     ef2:	84 91       	lpm	r24, Z
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <OLED_write_data_to_sram+0x26>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <OLED_write_data_to_sram+0x28>
     ef8:	00 00       	nop
     efa:	8d 93       	st	X+, r24
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	a4 17       	cp	r26, r20
     f00:	b5 07       	cpc	r27, r21
     f02:	b9 f7       	brne	.-18     	; 0xef2 <OLED_write_data_to_sram+0x22>
     f04:	08 95       	ret

00000f06 <OLED_print_to_sram>:
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	8c 01       	movw	r16, r24
     f18:	d6 2f       	mov	r29, r22
     f1a:	7c 01       	movw	r14, r24
     f1c:	c4 2f       	mov	r28, r20
     f1e:	cc 0f       	add	r28, r28
     f20:	cc 0f       	add	r28, r28
     f22:	cc 0f       	add	r28, r28
     f24:	c1 2c       	mov	r12, r1
     f26:	d1 2c       	mov	r13, r1
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <OLED_print_to_sram+0x40>
     f2a:	4c 2f       	mov	r20, r28
     f2c:	6d 2f       	mov	r22, r29
     f2e:	f7 01       	movw	r30, r14
     f30:	81 91       	ld	r24, Z+
     f32:	7f 01       	movw	r14, r30
     f34:	0e 94 68 07 	call	0xed0	; 0xed0 <OLED_write_data_to_sram>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <OLED_print_to_sram+0x34>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <OLED_print_to_sram+0x36>
     f3c:	00 00       	nop
     f3e:	ff ef       	ldi	r31, 0xFF	; 255
     f40:	cf 1a       	sub	r12, r31
     f42:	df 0a       	sbc	r13, r31
     f44:	c8 5f       	subi	r28, 0xF8	; 248
     f46:	f8 01       	movw	r30, r16
     f48:	01 90       	ld	r0, Z+
     f4a:	00 20       	and	r0, r0
     f4c:	e9 f7       	brne	.-6      	; 0xf48 <OLED_print_to_sram+0x42>
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	e0 1b       	sub	r30, r16
     f52:	f1 0b       	sbc	r31, r17
     f54:	ce 16       	cp	r12, r30
     f56:	df 06       	cpc	r13, r31
     f58:	40 f3       	brcs	.-48     	; 0xf2a <OLED_print_to_sram+0x24>
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	08 95       	ret

00000f6c <OLED_reset_sram>:
     f6c:	e0 e0       	ldi	r30, 0x00	; 0
     f6e:	f8 e1       	ldi	r31, 0x18	; 24
     f70:	11 92       	st	Z+, r1
     f72:	e1 15       	cp	r30, r1
     f74:	8c e1       	ldi	r24, 0x1C	; 28
     f76:	f8 07       	cpc	r31, r24
     f78:	d9 f7       	brne	.-10     	; 0xf70 <OLED_reset_sram+0x4>
     f7a:	08 95       	ret

00000f7c <OLED_init>:
     f7c:	8f ea       	ldi	r24, 0xAF	; 175
     f7e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdd6>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f e2       	ldi	r25, 0x2F	; 47
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <OLED_init+0xa>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <OLED_init+0x10>
     f8c:	00 00       	nop
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 33 07 	call	0xe66	; 0xe66 <OLED_pos>
     f96:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <OLED_reset>
     f9a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
     f9e:	08 95       	ret

00000fa0 <OLED_print_emoji_sram>:
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	e8 59       	subi	r30, 0x98	; 152
     fb2:	fc 4f       	sbci	r31, 0xFC	; 252
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	68 9f       	mul	r22, r24
     fba:	40 0d       	add	r20, r0
     fbc:	51 1d       	adc	r21, r1
     fbe:	11 24       	eor	r1, r1
     fc0:	da 01       	movw	r26, r20
     fc2:	b8 5e       	subi	r27, 0xE8	; 232
     fc4:	4b 5f       	subi	r20, 0xFB	; 251
     fc6:	57 4e       	sbci	r21, 0xE7	; 231
     fc8:	84 91       	lpm	r24, Z
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <OLED_print_emoji_sram+0x2c>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <OLED_print_emoji_sram+0x2e>
     fce:	00 00       	nop
     fd0:	8d 93       	st	X+, r24
     fd2:	31 96       	adiw	r30, 0x01	; 1
     fd4:	a4 17       	cp	r26, r20
     fd6:	b5 07       	cpc	r27, r21
     fd8:	b9 f7       	brne	.-18     	; 0xfc8 <OLED_print_emoji_sram+0x28>
     fda:	08 95       	ret

00000fdc <OLED_draw_point_sram>:
     fdc:	96 2f       	mov	r25, r22
     fde:	96 95       	lsr	r25
     fe0:	96 95       	lsr	r25
     fe2:	96 95       	lsr	r25
     fe4:	e8 2f       	mov	r30, r24
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 e8       	ldi	r24, 0x80	; 128
     fea:	98 9f       	mul	r25, r24
     fec:	e0 0d       	add	r30, r0
     fee:	f1 1d       	adc	r31, r1
     ff0:	11 24       	eor	r1, r1
     ff2:	f8 5e       	subi	r31, 0xE8	; 232
     ff4:	67 70       	andi	r22, 0x07	; 7
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <OLED_draw_point_sram+0x24>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	6a 95       	dec	r22
    1002:	e2 f7       	brpl	.-8      	; 0xffc <OLED_draw_point_sram+0x20>
    1004:	90 81       	ld	r25, Z
    1006:	89 2b       	or	r24, r25
    1008:	80 83       	st	Z, r24
    100a:	08 95       	ret

0000100c <OLED_clear_point_sram>:
    100c:	96 2f       	mov	r25, r22
    100e:	96 95       	lsr	r25
    1010:	96 95       	lsr	r25
    1012:	96 95       	lsr	r25
    1014:	e8 2f       	mov	r30, r24
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	98 9f       	mul	r25, r24
    101c:	e0 0d       	add	r30, r0
    101e:	f1 1d       	adc	r31, r1
    1020:	11 24       	eor	r1, r1
    1022:	f8 5e       	subi	r31, 0xE8	; 232
    1024:	67 70       	andi	r22, 0x07	; 7
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <OLED_clear_point_sram+0x24>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	6a 95       	dec	r22
    1032:	e2 f7       	brpl	.-8      	; 0x102c <OLED_clear_point_sram+0x20>
    1034:	80 95       	com	r24
    1036:	90 81       	ld	r25, Z
    1038:	89 23       	and	r24, r25
    103a:	80 83       	st	Z, r24
    103c:	08 95       	ret

0000103e <OLED_draw_box>:
    103e:	6f 92       	push	r6
    1040:	7f 92       	push	r7
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	e8 2f       	mov	r30, r24
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	e0 38       	cpi	r30, 0x80	; 128
    1060:	f1 05       	cpc	r31, r1
    1062:	14 f0       	brlt	.+4      	; 0x1068 <OLED_draw_box+0x2a>
    1064:	ef e7       	ldi	r30, 0x7F	; 127
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	1e 2f       	mov	r17, r30
    106a:	86 2f       	mov	r24, r22
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	80 34       	cpi	r24, 0x40	; 64
    1070:	91 05       	cpc	r25, r1
    1072:	14 f0       	brlt	.+4      	; 0x1078 <OLED_draw_box+0x3a>
    1074:	8f e3       	ldi	r24, 0x3F	; 63
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	d8 2f       	mov	r29, r24
    107a:	99 27       	eor	r25, r25
    107c:	4c 01       	movw	r8, r24
    107e:	82 0e       	add	r8, r18
    1080:	91 1c       	adc	r9, r1
    1082:	20 e4       	ldi	r18, 0x40	; 64
    1084:	82 16       	cp	r8, r18
    1086:	91 04       	cpc	r9, r1
    1088:	2c f0       	brlt	.+10     	; 0x1094 <OLED_draw_box+0x56>
    108a:	0f 2e       	mov	r0, r31
    108c:	ff e3       	ldi	r31, 0x3F	; 63
    108e:	8f 2e       	mov	r8, r31
    1090:	91 2c       	mov	r9, r1
    1092:	f0 2d       	mov	r31, r0
    1094:	88 15       	cp	r24, r8
    1096:	99 05       	cpc	r25, r9
    1098:	d4 f0       	brlt	.+52     	; 0x10ce <OLED_draw_box+0x90>
    109a:	2e c0       	rjmp	.+92     	; 0x10f8 <OLED_draw_box+0xba>
    109c:	c1 2f       	mov	r28, r17
    109e:	00 23       	and	r16, r16
    10a0:	29 f0       	breq	.+10     	; 0x10ac <OLED_draw_box+0x6e>
    10a2:	6d 2f       	mov	r22, r29
    10a4:	8c 2f       	mov	r24, r28
    10a6:	0e 94 06 08 	call	0x100c	; 0x100c <OLED_clear_point_sram>
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <OLED_draw_box+0x76>
    10ac:	6d 2f       	mov	r22, r29
    10ae:	8c 2f       	mov	r24, r28
    10b0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <OLED_draw_point_sram>
    10b4:	cf 5f       	subi	r28, 0xFF	; 255
    10b6:	8c 2f       	mov	r24, r28
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	8e 15       	cp	r24, r14
    10bc:	9f 05       	cpc	r25, r15
    10be:	7c f3       	brlt	.-34     	; 0x109e <OLED_draw_box+0x60>
    10c0:	df 5f       	subi	r29, 0xFF	; 255
    10c2:	8d 2f       	mov	r24, r29
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 15       	cp	r24, r8
    10c8:	99 05       	cpc	r25, r9
    10ca:	5c f0       	brlt	.+22     	; 0x10e2 <OLED_draw_box+0xa4>
    10cc:	15 c0       	rjmp	.+42     	; 0x10f8 <OLED_draw_box+0xba>
    10ce:	5f 01       	movw	r10, r30
    10d0:	bb 24       	eor	r11, r11
    10d2:	65 01       	movw	r12, r10
    10d4:	c4 0e       	add	r12, r20
    10d6:	d1 1c       	adc	r13, r1
    10d8:	0f 2e       	mov	r0, r31
    10da:	ff e7       	ldi	r31, 0x7F	; 127
    10dc:	6f 2e       	mov	r6, r31
    10de:	f0 2d       	mov	r31, r0
    10e0:	71 2c       	mov	r7, r1
    10e2:	76 01       	movw	r14, r12
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	c8 16       	cp	r12, r24
    10e8:	d1 04       	cpc	r13, r1
    10ea:	14 f0       	brlt	.+4      	; 0x10f0 <OLED_draw_box+0xb2>
    10ec:	e6 2c       	mov	r14, r6
    10ee:	f7 2c       	mov	r15, r7
    10f0:	ae 14       	cp	r10, r14
    10f2:	bf 04       	cpc	r11, r15
    10f4:	9c f2       	brlt	.-90     	; 0x109c <OLED_draw_box+0x5e>
    10f6:	e4 cf       	rjmp	.-56     	; 0x10c0 <OLED_draw_box+0x82>
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	9f 90       	pop	r9
    110e:	8f 90       	pop	r8
    1110:	7f 90       	pop	r7
    1112:	6f 90       	pop	r6
    1114:	08 95       	ret

00001116 <reverse_byte>:

uint8_t reverse_byte(uint8_t byte)
{
	byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    1116:	82 95       	swap	r24
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    1118:	98 2f       	mov	r25, r24
    111a:	9c 7c       	andi	r25, 0xCC	; 204
    111c:	29 2f       	mov	r18, r25
    111e:	26 95       	lsr	r18
    1120:	26 95       	lsr	r18
    1122:	98 2f       	mov	r25, r24
    1124:	93 73       	andi	r25, 0x33	; 51
    1126:	99 0f       	add	r25, r25
    1128:	99 0f       	add	r25, r25
    112a:	92 2b       	or	r25, r18
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    112c:	89 2f       	mov	r24, r25
    112e:	8a 7a       	andi	r24, 0xAA	; 170
    1130:	86 95       	lsr	r24
    1132:	95 75       	andi	r25, 0x55	; 85
    1134:	99 0f       	add	r25, r25
	return byte;
    1136:	89 2b       	or	r24, r25
    1138:	08 95       	ret

0000113a <OLED_draw_from_sram>:
		}
	}
}*/

void OLED_draw_from_sram(int INVERT_FLAG)
{ // flipped
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	6c 01       	movw	r12, r24
    1150:	0f 2e       	mov	r0, r31
    1152:	a1 2c       	mov	r10, r1
    1154:	fc e1       	ldi	r31, 0x1C	; 28
    1156:	bf 2e       	mov	r11, r31
    1158:	f0 2d       	mov	r31, r0
	for (uint8_t line = 0; line < 8; line++)
    115a:	d0 e0       	ldi	r29, 0x00	; 0
			uint8_t byte = external_ram[(7 - line) * 128 + (127 - col)];
			if (INVERT_FLAG)
			{
				byte = reverse_byte(byte);
			}
			OLED_Data[0] = byte; // write byte to screen
    115c:	0f 2e       	mov	r0, r31
    115e:	e1 2c       	mov	r14, r1
    1160:	f2 e1       	ldi	r31, 0x12	; 18
    1162:	ff 2e       	mov	r15, r31
    1164:	f0 2d       	mov	r31, r0

void OLED_draw_from_sram(int INVERT_FLAG)
{ // flipped
	for (uint8_t line = 0; line < 8; line++)
	{
		OLED_goto_line(line);
    1166:	8d 2f       	mov	r24, r29
    1168:	0e 94 42 07 	call	0xe84	; 0xe84 <OLED_goto_line>
    116c:	85 01       	movw	r16, r10
    116e:	c0 e0       	ldi	r28, 0x00	; 0

		for (int col = 0; col < 128; col++)
		{
			OLED_goto_col(col);
    1170:	8c 2f       	mov	r24, r28
    1172:	0e 94 2a 07 	call	0xe54	; 0xe54 <OLED_goto_col>

			uint8_t byte = external_ram[(7 - line) * 128 + (127 - col)];
    1176:	f8 01       	movw	r30, r16
    1178:	82 91       	ld	r24, -Z
    117a:	8f 01       	movw	r16, r30
			if (INVERT_FLAG)
    117c:	c1 14       	cp	r12, r1
    117e:	d1 04       	cpc	r13, r1
    1180:	11 f0       	breq	.+4      	; 0x1186 <OLED_draw_from_sram+0x4c>
			{
				byte = reverse_byte(byte);
    1182:	0e 94 8b 08 	call	0x1116	; 0x1116 <reverse_byte>
			}
			OLED_Data[0] = byte; // write byte to screen
    1186:	f7 01       	movw	r30, r14
    1188:	80 83       	st	Z, r24
    118a:	cf 5f       	subi	r28, 0xFF	; 255
{ // flipped
	for (uint8_t line = 0; line < 8; line++)
	{
		OLED_goto_line(line);

		for (int col = 0; col < 128; col++)
    118c:	c0 38       	cpi	r28, 0x80	; 128
    118e:	81 f7       	brne	.-32     	; 0x1170 <OLED_draw_from_sram+0x36>
	}
}*/

void OLED_draw_from_sram(int INVERT_FLAG)
{ // flipped
	for (uint8_t line = 0; line < 8; line++)
    1190:	df 5f       	subi	r29, 0xFF	; 255
    1192:	f0 e8       	ldi	r31, 0x80	; 128
    1194:	af 1a       	sub	r10, r31
    1196:	b1 08       	sbc	r11, r1
    1198:	d8 30       	cpi	r29, 0x08	; 8
    119a:	29 f7       	brne	.-54     	; 0x1166 <OLED_draw_from_sram+0x2c>
				byte = reverse_byte(byte);
			}
			OLED_Data[0] = byte; // write byte to screen
		}
	}
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	08 95       	ret

000011b2 <play_ping>:
#include "CAN_driver.h"
#include "io_driver.h"
#include "OLED_driver.h"

void play_ping(int16_t ID)
{
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	2c 97       	sbiw	r28, 0x0c	; 12
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	5c 01       	movw	r10, r24
	int i = 0;
	int a = 0;
	OLED_reset_sram();
    11d6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
	OLED_print_to_sram("Good Luck!", 1, 3);
    11da:	43 e0       	ldi	r20, 0x03	; 3
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	87 ea       	ldi	r24, 0xA7	; 167
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
	OLED_print_emoji_sram(4, 3, 60);
    11e6:	4c e3       	ldi	r20, 0x3C	; 60
    11e8:	63 e0       	ldi	r22, 0x03	; 3
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <OLED_print_emoji_sram>
	OLED_draw_from_sram(1);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
		msg.data[2] = get_btn_left();
		msg.data[3] = get_btn_right();
		msg.data[4] = slider_binary_to_decimal(get_slider_left());
		msg.data[5] = slider_binary_to_decimal(get_slider_right());

		msg.length = 6;
    11f8:	0f 2e       	mov	r0, r31
    11fa:	f6 e0       	ldi	r31, 0x06	; 6
    11fc:	df 2e       	mov	r13, r31
    11fe:	f0 2d       	mov	r31, r0
    1200:	89 ef       	ldi	r24, 0xF9	; 249
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <play_ping+0x52>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <play_ping+0x58>
    120a:	00 00       	nop
	

	while (1)
	{
		_delay_ms(1);
		uint16_t x = get_joystick_x();
    120c:	0e 94 9c 03 	call	0x738	; 0x738 <get_joystick_x>
    1210:	18 2f       	mov	r17, r24
		uint16_t y = get_joystick_y();
    1212:	0e 94 ac 03 	call	0x758	; 0x758 <get_joystick_y>

		joystick_vector j_vec = get_vector_direction_from_binary(x, y);
    1216:	68 2f       	mov	r22, r24
    1218:	81 2f       	mov	r24, r17
    121a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <get_vector_direction_from_binary>

		can_message msg;
		msg.ID = ID;
    121e:	ba 82       	std	Y+2, r11	; 0x02
    1220:	a9 82       	std	Y+1, r10	; 0x01

		msg.data[0] = j_vec.x;
    1222:	6c 83       	std	Y+4, r22	; 0x04
		msg.data[1] = j_vec.y;
    1224:	8d 83       	std	Y+5, r24	; 0x05
		msg.data[2] = get_btn_left();
    1226:	0e 94 7d 03 	call	0x6fa	; 0x6fa <get_btn_left>
    122a:	8e 83       	std	Y+6, r24	; 0x06
		msg.data[3] = get_btn_right();
    122c:	0e 94 80 03 	call	0x700	; 0x700 <get_btn_right>
    1230:	8f 83       	std	Y+7, r24	; 0x07
		msg.data[4] = slider_binary_to_decimal(get_slider_left());
    1232:	0e 94 84 03 	call	0x708	; 0x708 <get_slider_left>
    1236:	0e 94 48 03 	call	0x690	; 0x690 <slider_binary_to_decimal>
    123a:	88 87       	std	Y+8, r24	; 0x08
		msg.data[5] = slider_binary_to_decimal(get_slider_right());
    123c:	0e 94 90 03 	call	0x720	; 0x720 <get_slider_right>
    1240:	0e 94 48 03 	call	0x690	; 0x690 <slider_binary_to_decimal>
    1244:	89 87       	std	Y+9, r24	; 0x09

		msg.length = 6;
    1246:	db 82       	std	Y+3, r13	; 0x03
		CAN_send_message(msg);
    1248:	e9 80       	ldd	r14, Y+1	; 0x01
    124a:	fa 80       	ldd	r15, Y+2	; 0x02
    124c:	0d 2d       	mov	r16, r13
    124e:	1c 81       	ldd	r17, Y+4	; 0x04
    1250:	2d 81       	ldd	r18, Y+5	; 0x05
    1252:	3e 81       	ldd	r19, Y+6	; 0x06
    1254:	4f 81       	ldd	r20, Y+7	; 0x07
    1256:	58 85       	ldd	r21, Y+8	; 0x08
    1258:	68 2f       	mov	r22, r24
    125a:	7a 85       	ldd	r23, Y+10	; 0x0a
    125c:	8b 85       	ldd	r24, Y+11	; 0x0b
    125e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1260:	0e 94 f6 02 	call	0x5ec	; 0x5ec <CAN_send_message>
    1264:	83 ed       	ldi	r24, 0xD3	; 211
    1266:	90 e3       	ldi	r25, 0x30	; 48
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <play_ping+0xb6>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <play_ping+0xbc>
    126e:	00 00       	nop

		_delay_ms(50);
		if (get_btn_left())
    1270:	0e 94 7d 03 	call	0x6fa	; 0x6fa <get_btn_left>
    1274:	88 23       	and	r24, r24
    1276:	21 f2       	breq	.-120    	; 0x1200 <play_ping+0x4e>
		{
			break;
		}
	}
    1278:	2c 96       	adiw	r28, 0x0c	; 12
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	08 95       	ret

00001298 <draw_ball>:
 */

#include "pong_ball.h"

void draw_ball(PONG_BALL ball)
{
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	27 97       	sbiw	r28, 0x07	; 7
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
	//OLED_draw_circle(ball.x_pos, ball.y_pos, ball.r, 0);
	OLED_draw_box(ball.x_pos - 1, ball.y_pos - 1, 3, 3, 0);
    12b0:	63 2f       	mov	r22, r19
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	61 50       	subi	r22, 0x01	; 1
    12b6:	71 09       	sbc	r23, r1
    12b8:	82 2f       	mov	r24, r18
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	23 e0       	ldi	r18, 0x03	; 3
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	43 e0       	ldi	r20, 0x03	; 3
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	0e 94 1f 08 	call	0x103e	; 0x103e <OLED_draw_box>
}
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <collision>:
	ball->x_pos += ball->x_speed;
	ball->y_pos += ball->y_speed;
}

uint8_t collision(PONG_PLAYER player, PONG_BALL *ball)
{
    12e4:	29 2f       	mov	r18, r25
    12e6:	fa 01       	movw	r30, r20
	if (abs(ball->x_pos - player.x_pos) <= 1 && abs(ball->y_pos - player.y_pos - player.height / 2) < player.height)
    12e8:	80 81       	ld	r24, Z
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	86 1b       	sub	r24, r22
    12ee:	91 09       	sbc	r25, r1
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	03 97       	sbiw	r24, 0x03	; 3
    12f4:	d8 f4       	brcc	.+54     	; 0x132c <collision+0x48>
    12f6:	81 81       	ldd	r24, Z+1	; 0x01
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	87 1b       	sub	r24, r23
    12fc:	91 09       	sbc	r25, r1
    12fe:	32 2f       	mov	r19, r18
    1300:	36 95       	lsr	r19
    1302:	83 1b       	sub	r24, r19
    1304:	91 09       	sbc	r25, r1
    1306:	ac 01       	movw	r20, r24
    1308:	22 f4       	brpl	.+8      	; 0x1312 <collision+0x2e>
    130a:	44 27       	eor	r20, r20
    130c:	55 27       	eor	r21, r21
    130e:	48 1b       	sub	r20, r24
    1310:	59 0b       	sbc	r21, r25
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	42 17       	cp	r20, r18
    1316:	53 07       	cpc	r21, r19
    1318:	5c f4       	brge	.+22     	; 0x1330 <collision+0x4c>
	{
		ball->y_speed += (ball->y_pos - player.y_pos - player.height / 2) / 5;
    131a:	65 e0       	ldi	r22, 0x05	; 5
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodhi4>
    1322:	84 81       	ldd	r24, Z+4	; 0x04
    1324:	68 0f       	add	r22, r24
    1326:	64 83       	std	Z+4, r22	; 0x04
		return 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	08 95       	ret
	}
	return 0;
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

00001334 <move_ball>:
	//OLED_draw_circle(ball.x_pos, ball.y_pos, ball.r, 0);
	OLED_draw_box(ball.x_pos - 1, ball.y_pos - 1, 3, 3, 0);
}

void move_ball(PONG_BALL *ball, PONG_PLAYER player_1, PONG_PLAYER player_2)
{
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ec 01       	movw	r28, r24
    1346:	cb 01       	movw	r24, r22
    1348:	ba 01       	movw	r22, r20
    134a:	68 01       	movw	r12, r16
    134c:	79 01       	movw	r14, r18
	int16_t temp_x = ball->x_pos + ball->x_speed;
    134e:	28 81       	ld	r18, Y
    1350:	3b 81       	ldd	r19, Y+3	; 0x03
    1352:	43 2f       	mov	r20, r19
    1354:	33 0f       	add	r19, r19
    1356:	55 0b       	sbc	r21, r21
    1358:	fa 01       	movw	r30, r20
    135a:	e2 0f       	add	r30, r18
    135c:	f1 1d       	adc	r31, r1
	int16_t temp_y = ball->y_pos + ball->y_speed;
    135e:	49 81       	ldd	r20, Y+1	; 0x01
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	02 2e       	mov	r0, r18
    1364:	00 0c       	add	r0, r0
    1366:	33 0b       	sbc	r19, r19
    1368:	89 01       	movw	r16, r18
    136a:	04 0f       	add	r16, r20
    136c:	11 1d       	adc	r17, r1

	if (temp_x < 0 || temp_x > 128)
    136e:	e1 38       	cpi	r30, 0x81	; 129
    1370:	f1 05       	cpc	r31, r1
    1372:	a0 f0       	brcs	.+40     	; 0x139c <move_ball+0x68>
	{
		ball->x_pos = 64;
    1374:	20 e4       	ldi	r18, 0x40	; 64
    1376:	28 83       	st	Y, r18
		ball->y_pos = 32;
    1378:	20 e2       	ldi	r18, 0x20	; 32
    137a:	29 83       	std	Y+1, r18	; 0x01
		ball->y_speed = 0;
    137c:	1c 82       	std	Y+4, r1	; 0x04

		ball->score_p1 += temp_x > 128;
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	e1 38       	cpi	r30, 0x81	; 129
    1382:	f1 05       	cpc	r31, r1
    1384:	0c f4       	brge	.+2      	; 0x1388 <move_ball+0x54>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	23 0f       	add	r18, r19
    138c:	2d 83       	std	Y+5, r18	; 0x05
		ball->score_p2 += temp_x < 0;
    138e:	2f 2f       	mov	r18, r31
    1390:	22 1f       	adc	r18, r18
    1392:	22 27       	eor	r18, r18
    1394:	22 1f       	adc	r18, r18
    1396:	3e 81       	ldd	r19, Y+6	; 0x06
    1398:	23 0f       	add	r18, r19
    139a:	2e 83       	std	Y+6, r18	; 0x06
	}

	if (collision(player_1, ball) || collision(player_2, ball))
    139c:	ae 01       	movw	r20, r28
    139e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <collision>
    13a2:	81 11       	cpse	r24, r1
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <move_ball+0x80>
    13a6:	ae 01       	movw	r20, r28
    13a8:	c7 01       	movw	r24, r14
    13aa:	b6 01       	movw	r22, r12
    13ac:	0e 94 72 09 	call	0x12e4	; 0x12e4 <collision>
    13b0:	88 23       	and	r24, r24
    13b2:	19 f0       	breq	.+6      	; 0x13ba <move_ball+0x86>
		ball->x_speed *= -1;
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	81 95       	neg	r24
    13b8:	8b 83       	std	Y+3, r24	; 0x03
	if (temp_y < 0 || temp_y > 64)
    13ba:	01 34       	cpi	r16, 0x41	; 65
    13bc:	11 05       	cpc	r17, r1
    13be:	18 f0       	brcs	.+6      	; 0x13c6 <move_ball+0x92>
		ball->y_speed *= -1;
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	81 95       	neg	r24
    13c4:	8c 83       	std	Y+4, r24	; 0x04

	ball->x_pos += ball->x_speed;
    13c6:	98 81       	ld	r25, Y
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	89 0f       	add	r24, r25
    13cc:	88 83       	st	Y, r24
	ball->y_pos += ball->y_speed;
    13ce:	99 81       	ldd	r25, Y+1	; 0x01
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	89 0f       	add	r24, r25
    13d4:	89 83       	std	Y+1, r24	; 0x01
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <play_pong>:
 */

#include "pong_driver.h"

void play_pong(uint8_t x_speed_ball)
{
    13e8:	2f 92       	push	r2
    13ea:	3f 92       	push	r3
    13ec:	4f 92       	push	r4
    13ee:	5f 92       	push	r5
    13f0:	6f 92       	push	r6
    13f2:	7f 92       	push	r7
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	a4 97       	sbiw	r28, 0x24	; 36
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	18 2f       	mov	r17, r24
	printf("helllo gamers");
    141e:	82 eb       	ldi	r24, 0xB2	; 178
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	9f 93       	push	r25
    1424:	8f 93       	push	r24
    1426:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <printf>
	PONG_PLAYER player_1 = {4, 64 / 2, 1, 10, 1};
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	90 e2       	ldi	r25, 0x20	; 32
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	8b 83       	std	Y+3, r24	; 0x03
    1436:	2a e0       	ldi	r18, 0x0A	; 10
    1438:	2c 83       	std	Y+4, r18	; 0x04
	PONG_PLAYER player_2 = {128 - 1 - 4, 64 / 2, 1, 10, 1};
    143a:	3b e7       	ldi	r19, 0x7B	; 123
    143c:	3d 83       	std	Y+5, r19	; 0x05
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8f 83       	std	Y+7, r24	; 0x07
    1442:	28 87       	std	Y+8, r18	; 0x08

	PONG_BALL ball = {64 / 2, 128 / 2, 3, x_speed_ball, 1, 0, 0};
    1444:	99 87       	std	Y+9, r25	; 0x09
    1446:	90 e4       	ldi	r25, 0x40	; 64
    1448:	9a 87       	std	Y+10, r25	; 0x0a
    144a:	93 e0       	ldi	r25, 0x03	; 3
    144c:	9b 87       	std	Y+11, r25	; 0x0b
    144e:	1c 87       	std	Y+12, r17	; 0x0c
    1450:	8d 87       	std	Y+13, r24	; 0x0d
    1452:	1e 86       	std	Y+14, r1	; 0x0e
    1454:	1f 86       	std	Y+15, r1	; 0x0f
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
	while (1)
	{
		OLED_reset();
		OLED_reset_sram();

		printf("Slider = %d, %d\n", get_slider_left(), get_slider_right());
    145a:	0f 2e       	mov	r0, r31
    145c:	f0 ec       	ldi	r31, 0xC0	; 192
    145e:	6f 2e       	mov	r6, r31
    1460:	f1 e0       	ldi	r31, 0x01	; 1
    1462:	7f 2e       	mov	r7, r31
    1464:	f0 2d       	mov	r31, r0
		printf("players = %d, %d\n", player_1.y_pos, player_2.y_pos);
    1466:	0f 2e       	mov	r0, r31
    1468:	f1 ed       	ldi	r31, 0xD1	; 209
    146a:	4f 2e       	mov	r4, r31
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	5f 2e       	mov	r5, r31
    1470:	f0 2d       	mov	r31, r0
		_delay_ms(10);
		char score[11];
		char score1[5];
		char score2[5];

		sprintf(score1, "%d", ball.score_p1);
    1472:	0f 2e       	mov	r0, r31
    1474:	f3 ee       	ldi	r31, 0xE3	; 227
    1476:	cf 2e       	mov	r12, r31
    1478:	f1 e0       	ldi	r31, 0x01	; 1
    147a:	df 2e       	mov	r13, r31
    147c:	f0 2d       	mov	r31, r0
    147e:	4e 01       	movw	r8, r28
    1480:	20 e2       	ldi	r18, 0x20	; 32
    1482:	82 0e       	add	r8, r18
    1484:	91 1c       	adc	r9, r1
		sprintf(score2, "%d", ball.score_p2);
    1486:	5e 01       	movw	r10, r28
    1488:	3b e1       	ldi	r19, 0x1B	; 27
    148a:	a3 0e       	add	r10, r19
    148c:	b1 1c       	adc	r11, r1
		strcpy(score, score1);
    148e:	7e 01       	movw	r14, r28
    1490:	80 e1       	ldi	r24, 0x10	; 16
    1492:	e8 0e       	add	r14, r24
    1494:	f1 1c       	adc	r15, r1
		strcat(score, ":");
    1496:	0f 2e       	mov	r0, r31
    1498:	fa e3       	ldi	r31, 0x3A	; 58
    149a:	2f 2e       	mov	r2, r31
    149c:	31 2c       	mov	r3, r1
    149e:	f0 2d       	mov	r31, r0

	PONG_BALL ball = {64 / 2, 128 / 2, 3, x_speed_ball, 1, 0, 0};

	while (1)
	{
		OLED_reset();
    14a0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <OLED_reset>
		OLED_reset_sram();
    14a4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>

		printf("Slider = %d, %d\n", get_slider_left(), get_slider_right());
    14a8:	0e 94 90 03 	call	0x720	; 0x720 <get_slider_right>
    14ac:	18 2f       	mov	r17, r24
    14ae:	09 2f       	mov	r16, r25
    14b0:	0e 94 84 03 	call	0x708	; 0x708 <get_slider_left>
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	7f 92       	push	r7
    14be:	6f 92       	push	r6
    14c0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <printf>
		printf("players = %d, %d\n", player_1.y_pos, player_2.y_pos);
    14c4:	8e 81       	ldd	r24, Y+6	; 0x06
    14c6:	1f 92       	push	r1
    14c8:	8f 93       	push	r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	1f 92       	push	r1
    14ce:	8f 93       	push	r24
    14d0:	5f 92       	push	r5
    14d2:	4f 92       	push	r4
    14d4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <printf>

		move_player(&player_1, get_slider_left());
    14d8:	0e 94 84 03 	call	0x708	; 0x708 <get_slider_left>
    14dc:	68 2f       	mov	r22, r24
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 9f 0b 	call	0x173e	; 0x173e <move_player>
		move_player(&player_2, get_slider_right());
    14e6:	0e 94 90 03 	call	0x720	; 0x720 <get_slider_right>
    14ea:	68 2f       	mov	r22, r24
    14ec:	ce 01       	movw	r24, r28
    14ee:	05 96       	adiw	r24, 0x05	; 5
    14f0:	0e 94 9f 0b 	call	0x173e	; 0x173e <move_player>

		draw_player(player_1);
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	7a 81       	ldd	r23, Y+2	; 0x02
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	0e 94 94 0b 	call	0x1728	; 0x1728 <draw_player>
		draw_player(player_2);
    1500:	6d 81       	ldd	r22, Y+5	; 0x05
    1502:	7e 81       	ldd	r23, Y+6	; 0x06
    1504:	8f 81       	ldd	r24, Y+7	; 0x07
    1506:	98 85       	ldd	r25, Y+8	; 0x08
    1508:	0e 94 94 0b 	call	0x1728	; 0x1728 <draw_player>

		move_ball(&ball, player_1, player_2);
    150c:	0d 81       	ldd	r16, Y+5	; 0x05
    150e:	1e 81       	ldd	r17, Y+6	; 0x06
    1510:	2f 81       	ldd	r18, Y+7	; 0x07
    1512:	38 85       	ldd	r19, Y+8	; 0x08
    1514:	49 81       	ldd	r20, Y+1	; 0x01
    1516:	5a 81       	ldd	r21, Y+2	; 0x02
    1518:	6b 81       	ldd	r22, Y+3	; 0x03
    151a:	7c 81       	ldd	r23, Y+4	; 0x04
    151c:	ce 01       	movw	r24, r28
    151e:	09 96       	adiw	r24, 0x09	; 9
    1520:	0e 94 9a 09 	call	0x1334	; 0x1334 <move_ball>
		draw_ball(ball);
    1524:	29 85       	ldd	r18, Y+9	; 0x09
    1526:	3a 85       	ldd	r19, Y+10	; 0x0a
    1528:	4b 85       	ldd	r20, Y+11	; 0x0b
    152a:	5c 85       	ldd	r21, Y+12	; 0x0c
    152c:	6d 85       	ldd	r22, Y+13	; 0x0d
    152e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1530:	8f 85       	ldd	r24, Y+15	; 0x0f
    1532:	0e 94 4c 09 	call	0x1298	; 0x1298 <draw_ball>
    1536:	83 ec       	ldi	r24, 0xC3	; 195
    1538:	99 e0       	ldi	r25, 0x09	; 9
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <play_pong+0x152>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <play_pong+0x158>
    1540:	00 00       	nop
		_delay_ms(10);
		char score[11];
		char score1[5];
		char score2[5];

		sprintf(score1, "%d", ball.score_p1);
    1542:	8e 85       	ldd	r24, Y+14	; 0x0e
    1544:	1f 92       	push	r1
    1546:	8f 93       	push	r24
    1548:	df 92       	push	r13
    154a:	cf 92       	push	r12
    154c:	9f 92       	push	r9
    154e:	8f 92       	push	r8
    1550:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <sprintf>
		sprintf(score2, "%d", ball.score_p2);
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	1f 92       	push	r1
    1558:	8f 93       	push	r24
    155a:	df 92       	push	r13
    155c:	cf 92       	push	r12
    155e:	bf 92       	push	r11
    1560:	af 92       	push	r10
    1562:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <sprintf>
		strcpy(score, score1);
    1566:	b4 01       	movw	r22, r8
    1568:	c7 01       	movw	r24, r14
    156a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <strcpy>
		strcat(score, ":");
    156e:	f7 01       	movw	r30, r14
    1570:	01 90       	ld	r0, Z+
    1572:	00 20       	and	r0, r0
    1574:	e9 f7       	brne	.-6      	; 0x1570 <play_pong+0x188>
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	31 82       	std	Z+1, r3	; 0x01
    157a:	20 82       	st	Z, r2
		strcat(score, score2);
    157c:	b5 01       	movw	r22, r10
    157e:	c7 01       	movw	r24, r14
    1580:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcat>

		OLED_print_to_sram(score, 0, 3);
    1584:	43 e0       	ldi	r20, 0x03	; 3
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
		OLED_draw_from_sram(1);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
    159a:	8f e0       	ldi	r24, 0x0F	; 15
    159c:	97 e2       	ldi	r25, 0x27	; 39
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <play_pong+0x1b6>
    15a2:	00 c0       	rjmp	.+0      	; 0x15a4 <play_pong+0x1bc>
    15a4:	00 00       	nop
		_delay_ms(40);

		if (get_btn_left())
    15a6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <get_btn_left>
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	89 2b       	or	r24, r25
    15b6:	09 f4       	brne	.+2      	; 0x15ba <play_pong+0x1d2>
    15b8:	73 cf       	rjmp	.-282    	; 0x14a0 <play_pong+0xb8>
    15ba:	e9 e0       	ldi	r30, 0x09	; 9
    15bc:	f0 e2       	ldi	r31, 0x20	; 32
		{
			for (uint8_t i = n_highscore_elements*2; i > 1; i--)
				pong_score_sram[i] = pong_score_sram[i-2];
    15be:	82 91       	ld	r24, -Z
    15c0:	82 83       	std	Z+2, r24	; 0x02
		OLED_draw_from_sram(1);
		_delay_ms(40);

		if (get_btn_left())
		{
			for (uint8_t i = n_highscore_elements*2; i > 1; i--)
    15c2:	e1 15       	cp	r30, r1
    15c4:	30 e2       	ldi	r19, 0x20	; 32
    15c6:	f3 07       	cpc	r31, r19
    15c8:	d1 f7       	brne	.-12     	; 0x15be <play_pong+0x1d6>
				pong_score_sram[i] = pong_score_sram[i-2];
			pong_score_sram[0] = score1;
    15ca:	ce 01       	movw	r24, r28
    15cc:	80 96       	adiw	r24, 0x20	; 32
    15ce:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x1dd6>
			pong_score_sram[1] = score2;
    15d2:	05 97       	sbiw	r24, 0x05	; 5
    15d4:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <__bss_end+0x1dd7>
			return;
		}
	}
}
    15d8:	a4 96       	adiw	r28, 0x24	; 36
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	7f 90       	pop	r7
    15fe:	6f 90       	pop	r6
    1600:	5f 90       	pop	r5
    1602:	4f 90       	pop	r4
    1604:	3f 90       	pop	r3
    1606:	2f 90       	pop	r2
    1608:	08 95       	ret

0000160a <print_score_history>:

print_score_history() {
    160a:	6f 92       	push	r6
    160c:	7f 92       	push	r7
    160e:	8f 92       	push	r8
    1610:	9f 92       	push	r9
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	65 97       	sbiw	r28, 0x15	; 21
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
	OLED_reset_sram();
    1636:	0e 94 b6 07 	call	0xf6c	; 0xf6c <OLED_reset_sram>
    163a:	87 e8       	ldi	r24, 0x87	; 135
    163c:	93 e1       	ldi	r25, 0x13	; 19
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <print_score_history+0x34>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <print_score_history+0x3a>
    1644:	00 00       	nop
	_delay_ms(20);
	OLED_print_to_sram('Highscores', 0, 0);
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	83 e7       	ldi	r24, 0x73	; 115
    1650:	95 e6       	ldi	r25, 0x65	; 101
    1652:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	10 e2       	ldi	r17, 0x20	; 32
	{
		char score[11];
		char score1[5];
		char score2[5];
		
		sprintf(score1, "%d", pong_score_sram[i]);
    165a:	0f 2e       	mov	r0, r31
    165c:	f3 ee       	ldi	r31, 0xE3	; 227
    165e:	cf 2e       	mov	r12, r31
    1660:	f1 e0       	ldi	r31, 0x01	; 1
    1662:	df 2e       	mov	r13, r31
    1664:	f0 2d       	mov	r31, r0
    1666:	4e 01       	movw	r8, r28
    1668:	91 e1       	ldi	r25, 0x11	; 17
    166a:	89 0e       	add	r8, r25
    166c:	91 1c       	adc	r9, r1
		sprintf(score2, "%d", pong_score_sram[i+1]);
    166e:	5e 01       	movw	r10, r28
    1670:	ec e0       	ldi	r30, 0x0C	; 12
    1672:	ae 0e       	add	r10, r30
    1674:	b1 1c       	adc	r11, r1
		strcpy(score, score1);
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	7c 01       	movw	r14, r24
		strcat(score, ":");
    167c:	0f 2e       	mov	r0, r31
    167e:	fa e3       	ldi	r31, 0x3A	; 58
    1680:	6f 2e       	mov	r6, r31
    1682:	71 2c       	mov	r7, r1
    1684:	f0 2d       	mov	r31, r0
	{
		char score[11];
		char score1[5];
		char score2[5];
		
		sprintf(score1, "%d", pong_score_sram[i]);
    1686:	f8 01       	movw	r30, r16
    1688:	80 81       	ld	r24, Z
    168a:	1f 92       	push	r1
    168c:	8f 93       	push	r24
    168e:	df 92       	push	r13
    1690:	cf 92       	push	r12
    1692:	9f 92       	push	r9
    1694:	8f 92       	push	r8
    1696:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <sprintf>
		sprintf(score2, "%d", pong_score_sram[i+1]);
    169a:	f8 01       	movw	r30, r16
    169c:	81 81       	ldd	r24, Z+1	; 0x01
    169e:	1f 92       	push	r1
    16a0:	8f 93       	push	r24
    16a2:	df 92       	push	r13
    16a4:	cf 92       	push	r12
    16a6:	bf 92       	push	r11
    16a8:	af 92       	push	r10
    16aa:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <sprintf>
		strcpy(score, score1);
    16ae:	b4 01       	movw	r22, r8
    16b0:	c7 01       	movw	r24, r14
    16b2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <strcpy>
		strcat(score, ":");
    16b6:	f7 01       	movw	r30, r14
    16b8:	01 90       	ld	r0, Z+
    16ba:	00 20       	and	r0, r0
    16bc:	e9 f7       	brne	.-6      	; 0x16b8 <print_score_history+0xae>
    16be:	31 97       	sbiw	r30, 0x01	; 1
    16c0:	71 82       	std	Z+1, r7	; 0x01
    16c2:	60 82       	st	Z, r6
		strcat(score, score2);
    16c4:	b5 01       	movw	r22, r10
    16c6:	c7 01       	movw	r24, r14
    16c8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcat>
		
		OLED_print_to_sram(score, i/2 + 1, 3);
    16cc:	60 2f       	mov	r22, r16
    16ce:	66 95       	lsr	r22
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	43 e0       	ldi	r20, 0x03	; 3
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	c7 01       	movw	r24, r14
    16dc:	0e 94 83 07 	call	0xf06	; 0xf06 <OLED_print_to_sram>
		OLED_draw_from_sram(1);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 9d 08 	call	0x113a	; 0x113a <OLED_draw_from_sram>
    16e8:	0e 5f       	subi	r16, 0xFE	; 254
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255

print_score_history() {
	OLED_reset_sram();
	_delay_ms(20);
	OLED_print_to_sram('Highscores', 0, 0);
	for (uint8_t i = 0; i < n_highscore_elements*2; i += 2)
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	0a 30       	cpi	r16, 0x0A	; 10
    16f8:	90 e2       	ldi	r25, 0x20	; 32
    16fa:	19 07       	cpc	r17, r25
    16fc:	21 f6       	brne	.-120    	; 0x1686 <print_score_history+0x7c>
		strcat(score, score2);
		
		OLED_print_to_sram(score, i/2 + 1, 3);
		OLED_draw_from_sram(1);
	}
    16fe:	65 96       	adiw	r28, 0x15	; 21
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	7f 90       	pop	r7
    1724:	6f 90       	pop	r6
    1726:	08 95       	ret

00001728 <draw_player>:

#include "pong_player.h"
#include "OLED_driver.h"

void draw_player(PONG_PLAYER player)
{
    1728:	0f 93       	push	r16
    172a:	36 2f       	mov	r19, r22
    172c:	67 2f       	mov	r22, r23
	OLED_draw_box(player.x_pos, player.y_pos, player.width, player.height, 0);
    172e:	00 e0       	ldi	r16, 0x00	; 0
    1730:	29 2f       	mov	r18, r25
    1732:	48 2f       	mov	r20, r24
    1734:	83 2f       	mov	r24, r19
    1736:	0e 94 1f 08 	call	0x103e	; 0x103e <OLED_draw_box>
}
    173a:	0f 91       	pop	r16
    173c:	08 95       	ret

0000173e <move_player>:

void move_player(PONG_PLAYER *player, uint8_t slider)
{
	player->y_pos = (slider * (64 - player->height)) / 256;
    173e:	fc 01       	movw	r30, r24
    1740:	43 81       	ldd	r20, Z+3	; 0x03
    1742:	20 e4       	ldi	r18, 0x40	; 64
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	24 1b       	sub	r18, r20
    1748:	31 09       	sbc	r19, r1
    174a:	62 9f       	mul	r22, r18
    174c:	a0 01       	movw	r20, r0
    174e:	63 9f       	mul	r22, r19
    1750:	50 0d       	add	r21, r0
    1752:	11 24       	eor	r1, r1
    1754:	55 23       	and	r21, r21
    1756:	14 f4       	brge	.+4      	; 0x175c <move_player+0x1e>
    1758:	41 50       	subi	r20, 0x01	; 1
    175a:	5f 4f       	sbci	r21, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	51 83       	std	Z+1, r21	; 0x01
    1760:	08 95       	ret

00001762 <spi_master_init>:
    1762:	80 eb       	ldi	r24, 0xB0	; 176
    1764:	87 bb       	out	0x17, r24	; 23
    1766:	81 e5       	ldi	r24, 0x51	; 81
    1768:	8d b9       	out	0x0d, r24	; 13
    176a:	c6 98       	cbi	0x18, 6	; 24
    176c:	08 95       	ret

0000176e <SPI_transmission>:
    176e:	8f b9       	out	0x0f, r24	; 15
    1770:	77 9b       	sbis	0x0e, 7	; 14
    1772:	fe cf       	rjmp	.-4      	; 0x1770 <SPI_transmission+0x2>
    1774:	8f b1       	in	r24, 0x0f	; 15
    1776:	08 95       	ret

00001778 <uart_send>:
#include "uart_driver.h"


void uart_send(unsigned char letter) {
	
	while (! (UCSR1A & (1<<UDRE1))){}
    1778:	15 9b       	sbis	0x02, 5	; 2
    177a:	fe cf       	rjmp	.-4      	; 0x1778 <uart_send>
	
	UDR1 = letter;
    177c:	83 b9       	out	0x03, r24	; 3
    177e:	08 95       	ret

00001780 <uart_recieve>:
};

char uart_recieve() {
	while (! (UCSR1A & (1<<RXC1))){}
    1780:	17 9b       	sbis	0x02, 7	; 2
    1782:	fe cf       	rjmp	.-4      	; 0x1780 <uart_recieve>
	
	return UDR1;
    1784:	83 b1       	in	r24, 0x03	; 3
};
    1786:	08 95       	ret

00001788 <init_UART>:

void init_UART (unsigned int ubrr) {
	// set baud rate
	UBRR1H = (unsigned char) (ubrr>>8);
    1788:	9c bf       	out	0x3c, r25	; 60
	UBRR1L = (unsigned char) ubrr;
    178a:	80 b9       	out	0x00, r24	; 0
	
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
    178c:	88 e1       	ldi	r24, 0x18	; 24
    178e:	81 b9       	out	0x01, r24	; 1
	
	UCSR1C = (1<<URSEL1) | (1<<USBS1) | (3<<UCSZ10);
    1790:	8e e8       	ldi	r24, 0x8E	; 142
    1792:	8c bf       	out	0x3c, r24	; 60


	// setup printf
	fdevopen(uart_send, uart_recieve);
    1794:	60 ec       	ldi	r22, 0xC0	; 192
    1796:	7b e0       	ldi	r23, 0x0B	; 11
    1798:	8c eb       	ldi	r24, 0xBC	; 188
    179a:	9b e0       	ldi	r25, 0x0B	; 11
    179c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <fdevopen>
    17a0:	08 95       	ret

000017a2 <main>:
#include "Joystick.h"

int main(void)
{
	// enable interrupts
	SREG |= 1 << 7;
    17a2:	8f b7       	in	r24, 0x3f	; 63
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	8f bf       	out	0x3f, r24	; 63
	DDRD &= ~(1 << PD2); // tester � enable interrupts
    17a8:	8a 98       	cbi	0x11, 2	; 17

	//_SFR_IO8(0x3F)

	// Init sram
	DDRA |= (1 << PA0);
    17aa:	d0 9a       	sbi	0x1a, 0	; 26
	DDRA = 0xfff;
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 1 << PE1;
    17b0:	31 9a       	sbi	0x06, 1	; 6
	DDRC |= 0b1111;
    17b2:	84 b3       	in	r24, 0x14	; 20
    17b4:	8f 60       	ori	r24, 0x0F	; 15
    17b6:	84 bb       	out	0x14, r24	; 20

	DDRD |= 1 << PD7; // enable Read
    17b8:	8f 9a       	sbi	0x11, 7	; 17
	DDRD |= 1 << PD6; // enable write
    17ba:	8e 9a       	sbi	0x11, 6	; 17

	MCUCR |= (1 << SRE);
    17bc:	85 b7       	in	r24, 0x35	; 53
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
    17c2:	80 b7       	in	r24, 0x30	; 48
    17c4:	80 62       	ori	r24, 0x20	; 32
    17c6:	80 bf       	out	0x30, r24	; 48
	// end init

	init_UART(MYUBRR);
    17c8:	8f e1       	ldi	r24, 0x1F	; 31
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <init_UART>
	printf("\n\nRun main:\n");
    17d0:	86 ee       	ldi	r24, 0xE6	; 230
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <puts>
	init_IO();
    17d8:	0e 94 bc 03 	call	0x778	; 0x778 <init_IO>
	OLED_init();
    17dc:	0e 94 be 07 	call	0xf7c	; 0xf7c <OLED_init>
	CAN_init();
    17e0:	0e 94 c1 02 	call	0x582	; 0x582 <CAN_init>
	menu_init();
    17e4:	0e 94 27 04 	call	0x84e	; 0x84e <menu_init>
	display();
    17e8:	0e 94 c4 05 	call	0xb88	; 0xb88 <display>

	while (1)
	{
		int16_t joy_y = joy_axis_binary_to_decimal(get_joystick_y(), 165);
    17ec:	0e 94 ac 03 	call	0x758	; 0x758 <get_joystick_y>
    17f0:	65 ea       	ldi	r22, 0xA5	; 165
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joy_axis_binary_to_decimal>
		uint8_t threshold = 10;
		if (joy_y > threshold)
    17f8:	8b 30       	cpi	r24, 0x0B	; 11
    17fa:	91 05       	cpc	r25, r1
    17fc:	64 f0       	brlt	.+24     	; 0x1816 <main+0x74>
		{
			//check_child();
			update_display_prev();
    17fe:	0e 94 51 06 	call	0xca2	; 0xca2 <update_display_prev>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	80 40       	sbci	r24, 0x00	; 0
    180c:	90 40       	sbci	r25, 0x00	; 0
    180e:	e1 f7       	brne	.-8      	; 0x1808 <main+0x66>
    1810:	00 c0       	rjmp	.+0      	; 0x1812 <main+0x70>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <main+0x72>
    1814:	eb cf       	rjmp	.-42     	; 0x17ec <main+0x4a>
			_delay_ms(200);
		}
		else if (joy_y < -threshold)
    1816:	86 3f       	cpi	r24, 0xF6	; 246
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	64 f4       	brge	.+24     	; 0x1834 <main+0x92>
		{
			update_display_next();
    181c:	0e 94 06 06 	call	0xc0c	; 0xc0c <update_display_next>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	22 e0       	ldi	r18, 0x02	; 2
    1826:	81 50       	subi	r24, 0x01	; 1
    1828:	90 40       	sbci	r25, 0x00	; 0
    182a:	20 40       	sbci	r18, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <main+0x84>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <main+0x8e>
    1830:	00 c0       	rjmp	.+0      	; 0x1832 <main+0x90>
    1832:	dc cf       	rjmp	.-72     	; 0x17ec <main+0x4a>
			_delay_ms(200);
		}
		else if (get_btn_right())
    1834:	0e 94 80 03 	call	0x700	; 0x700 <get_btn_right>
    1838:	89 2b       	or	r24, r25
    183a:	81 f0       	breq	.+32     	; 0x185c <main+0xba>
		{
			printf("button pressed\n");
    183c:	82 ef       	ldi	r24, 0xF2	; 242
    183e:	91 e0       	ldi	r25, 0x01	; 1
    1840:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <puts>
			check_child();
    1844:	0e 94 c1 06 	call	0xd82	; 0xd82 <check_child>
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	9f e7       	ldi	r25, 0x7F	; 127
    184c:	27 e0       	ldi	r18, 0x07	; 7
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	90 40       	sbci	r25, 0x00	; 0
    1852:	20 40       	sbci	r18, 0x00	; 0
    1854:	e1 f7       	brne	.-8      	; 0x184e <main+0xac>
    1856:	00 c0       	rjmp	.+0      	; 0x1858 <main+0xb6>
    1858:	00 00       	nop
    185a:	c8 cf       	rjmp	.-112    	; 0x17ec <main+0x4a>
			_delay_ms(500);
		}
		else if (get_btn_left())
    185c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <get_btn_left>
    1860:	89 2b       	or	r24, r25
    1862:	21 f2       	breq	.-120    	; 0x17ec <main+0x4a>
		{
			go_back();
    1864:	0e 94 a3 06 	call	0xd46	; 0xd46 <go_back>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	9f e7       	ldi	r25, 0x7F	; 127
    186c:	27 e0       	ldi	r18, 0x07	; 7
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	90 40       	sbci	r25, 0x00	; 0
    1872:	20 40       	sbci	r18, 0x00	; 0
    1874:	e1 f7       	brne	.-8      	; 0x186e <main+0xcc>
    1876:	00 c0       	rjmp	.+0      	; 0x1878 <main+0xd6>
    1878:	00 00       	nop
    187a:	b8 cf       	rjmp	.-144    	; 0x17ec <main+0x4a>

0000187c <__divmodhi4>:
    187c:	97 fb       	bst	r25, 7
    187e:	07 2e       	mov	r0, r23
    1880:	16 f4       	brtc	.+4      	; 0x1886 <__divmodhi4+0xa>
    1882:	00 94       	com	r0
    1884:	07 d0       	rcall	.+14     	; 0x1894 <__divmodhi4_neg1>
    1886:	77 fd       	sbrc	r23, 7
    1888:	09 d0       	rcall	.+18     	; 0x189c <__divmodhi4_neg2>
    188a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__udivmodhi4>
    188e:	07 fc       	sbrc	r0, 7
    1890:	05 d0       	rcall	.+10     	; 0x189c <__divmodhi4_neg2>
    1892:	3e f4       	brtc	.+14     	; 0x18a2 <__divmodhi4_exit>

00001894 <__divmodhi4_neg1>:
    1894:	90 95       	com	r25
    1896:	81 95       	neg	r24
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	08 95       	ret

0000189c <__divmodhi4_neg2>:
    189c:	70 95       	com	r23
    189e:	61 95       	neg	r22
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255

000018a2 <__divmodhi4_exit>:
    18a2:	08 95       	ret

000018a4 <__udivmodhi4>:
    18a4:	aa 1b       	sub	r26, r26
    18a6:	bb 1b       	sub	r27, r27
    18a8:	51 e1       	ldi	r21, 0x11	; 17
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <__udivmodhi4_ep>

000018ac <__udivmodhi4_loop>:
    18ac:	aa 1f       	adc	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	a6 17       	cp	r26, r22
    18b2:	b7 07       	cpc	r27, r23
    18b4:	10 f0       	brcs	.+4      	; 0x18ba <__udivmodhi4_ep>
    18b6:	a6 1b       	sub	r26, r22
    18b8:	b7 0b       	sbc	r27, r23

000018ba <__udivmodhi4_ep>:
    18ba:	88 1f       	adc	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	5a 95       	dec	r21
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <__udivmodhi4_loop>
    18c2:	80 95       	com	r24
    18c4:	90 95       	com	r25
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	08 95       	ret

000018cc <malloc>:
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	82 30       	cpi	r24, 0x02	; 2
    18d6:	91 05       	cpc	r25, r1
    18d8:	10 f4       	brcc	.+4      	; 0x18de <malloc+0x12>
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__flp>
    18e2:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <__flp+0x1>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	19 f1       	breq	.+70     	; 0x1938 <malloc+0x6c>
    18f2:	40 81       	ld	r20, Z
    18f4:	51 81       	ldd	r21, Z+1	; 0x01
    18f6:	02 81       	ldd	r16, Z+2	; 0x02
    18f8:	13 81       	ldd	r17, Z+3	; 0x03
    18fa:	48 17       	cp	r20, r24
    18fc:	59 07       	cpc	r21, r25
    18fe:	c8 f0       	brcs	.+50     	; 0x1932 <malloc+0x66>
    1900:	84 17       	cp	r24, r20
    1902:	95 07       	cpc	r25, r21
    1904:	69 f4       	brne	.+26     	; 0x1920 <malloc+0x54>
    1906:	10 97       	sbiw	r26, 0x00	; 0
    1908:	31 f0       	breq	.+12     	; 0x1916 <malloc+0x4a>
    190a:	12 96       	adiw	r26, 0x02	; 2
    190c:	0c 93       	st	X, r16
    190e:	12 97       	sbiw	r26, 0x02	; 2
    1910:	13 96       	adiw	r26, 0x03	; 3
    1912:	1c 93       	st	X, r17
    1914:	27 c0       	rjmp	.+78     	; 0x1964 <malloc+0x98>
    1916:	00 93 22 02 	sts	0x0222, r16	; 0x800222 <__flp>
    191a:	10 93 23 02 	sts	0x0223, r17	; 0x800223 <__flp+0x1>
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <malloc+0x98>
    1920:	21 15       	cp	r18, r1
    1922:	31 05       	cpc	r19, r1
    1924:	19 f0       	breq	.+6      	; 0x192c <malloc+0x60>
    1926:	42 17       	cp	r20, r18
    1928:	53 07       	cpc	r21, r19
    192a:	18 f4       	brcc	.+6      	; 0x1932 <malloc+0x66>
    192c:	9a 01       	movw	r18, r20
    192e:	bd 01       	movw	r22, r26
    1930:	ef 01       	movw	r28, r30
    1932:	df 01       	movw	r26, r30
    1934:	f8 01       	movw	r30, r16
    1936:	db cf       	rjmp	.-74     	; 0x18ee <malloc+0x22>
    1938:	21 15       	cp	r18, r1
    193a:	31 05       	cpc	r19, r1
    193c:	f9 f0       	breq	.+62     	; 0x197c <malloc+0xb0>
    193e:	28 1b       	sub	r18, r24
    1940:	39 0b       	sbc	r19, r25
    1942:	24 30       	cpi	r18, 0x04	; 4
    1944:	31 05       	cpc	r19, r1
    1946:	80 f4       	brcc	.+32     	; 0x1968 <malloc+0x9c>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	21 f0       	breq	.+8      	; 0x195a <malloc+0x8e>
    1952:	fb 01       	movw	r30, r22
    1954:	93 83       	std	Z+3, r25	; 0x03
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <malloc+0x96>
    195a:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <__flp+0x1>
    195e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__flp>
    1962:	fe 01       	movw	r30, r28
    1964:	32 96       	adiw	r30, 0x02	; 2
    1966:	44 c0       	rjmp	.+136    	; 0x19f0 <malloc+0x124>
    1968:	fe 01       	movw	r30, r28
    196a:	e2 0f       	add	r30, r18
    196c:	f3 1f       	adc	r31, r19
    196e:	81 93       	st	Z+, r24
    1970:	91 93       	st	Z+, r25
    1972:	22 50       	subi	r18, 0x02	; 2
    1974:	31 09       	sbc	r19, r1
    1976:	39 83       	std	Y+1, r19	; 0x01
    1978:	28 83       	st	Y, r18
    197a:	3a c0       	rjmp	.+116    	; 0x19f0 <malloc+0x124>
    197c:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__brkval>
    1980:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <__brkval+0x1>
    1984:	23 2b       	or	r18, r19
    1986:	41 f4       	brne	.+16     	; 0x1998 <malloc+0xcc>
    1988:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    198c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1990:	30 93 21 02 	sts	0x0221, r19	; 0x800221 <__brkval+0x1>
    1994:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <__brkval>
    1998:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    199c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    19a0:	21 15       	cp	r18, r1
    19a2:	31 05       	cpc	r19, r1
    19a4:	41 f4       	brne	.+16     	; 0x19b6 <malloc+0xea>
    19a6:	2d b7       	in	r18, 0x3d	; 61
    19a8:	3e b7       	in	r19, 0x3e	; 62
    19aa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    19ae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    19b2:	24 1b       	sub	r18, r20
    19b4:	35 0b       	sbc	r19, r21
    19b6:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__brkval>
    19ba:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__brkval+0x1>
    19be:	e2 17       	cp	r30, r18
    19c0:	f3 07       	cpc	r31, r19
    19c2:	a0 f4       	brcc	.+40     	; 0x19ec <malloc+0x120>
    19c4:	2e 1b       	sub	r18, r30
    19c6:	3f 0b       	sbc	r19, r31
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	78 f0       	brcs	.+30     	; 0x19ec <malloc+0x120>
    19ce:	ac 01       	movw	r20, r24
    19d0:	4e 5f       	subi	r20, 0xFE	; 254
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	24 17       	cp	r18, r20
    19d6:	35 07       	cpc	r19, r21
    19d8:	48 f0       	brcs	.+18     	; 0x19ec <malloc+0x120>
    19da:	4e 0f       	add	r20, r30
    19dc:	5f 1f       	adc	r21, r31
    19de:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <__brkval+0x1>
    19e2:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <__brkval>
    19e6:	81 93       	st	Z+, r24
    19e8:	91 93       	st	Z+, r25
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <malloc+0x124>
    19ec:	e0 e0       	ldi	r30, 0x00	; 0
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	cf 01       	movw	r24, r30
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <free>:
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <free+0xa>
    1a04:	81 c0       	rjmp	.+258    	; 0x1b08 <free+0x10c>
    1a06:	fc 01       	movw	r30, r24
    1a08:	32 97       	sbiw	r30, 0x02	; 2
    1a0a:	13 82       	std	Z+3, r1	; 0x03
    1a0c:	12 82       	std	Z+2, r1	; 0x02
    1a0e:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <__flp>
    1a12:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <__flp+0x1>
    1a16:	10 97       	sbiw	r26, 0x00	; 0
    1a18:	81 f4       	brne	.+32     	; 0x1a3a <free+0x3e>
    1a1a:	20 81       	ld	r18, Z
    1a1c:	31 81       	ldd	r19, Z+1	; 0x01
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__brkval>
    1a26:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <__brkval+0x1>
    1a2a:	28 17       	cp	r18, r24
    1a2c:	39 07       	cpc	r19, r25
    1a2e:	51 f5       	brne	.+84     	; 0x1a84 <free+0x88>
    1a30:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__brkval+0x1>
    1a34:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__brkval>
    1a38:	67 c0       	rjmp	.+206    	; 0x1b08 <free+0x10c>
    1a3a:	ed 01       	movw	r28, r26
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	ce 17       	cp	r28, r30
    1a42:	df 07       	cpc	r29, r31
    1a44:	40 f4       	brcc	.+16     	; 0x1a56 <free+0x5a>
    1a46:	4a 81       	ldd	r20, Y+2	; 0x02
    1a48:	5b 81       	ldd	r21, Y+3	; 0x03
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	41 15       	cp	r20, r1
    1a4e:	51 05       	cpc	r21, r1
    1a50:	f1 f0       	breq	.+60     	; 0x1a8e <free+0x92>
    1a52:	ea 01       	movw	r28, r20
    1a54:	f5 cf       	rjmp	.-22     	; 0x1a40 <free+0x44>
    1a56:	d3 83       	std	Z+3, r29	; 0x03
    1a58:	c2 83       	std	Z+2, r28	; 0x02
    1a5a:	40 81       	ld	r20, Z
    1a5c:	51 81       	ldd	r21, Z+1	; 0x01
    1a5e:	84 0f       	add	r24, r20
    1a60:	95 1f       	adc	r25, r21
    1a62:	c8 17       	cp	r28, r24
    1a64:	d9 07       	cpc	r29, r25
    1a66:	59 f4       	brne	.+22     	; 0x1a7e <free+0x82>
    1a68:	88 81       	ld	r24, Y
    1a6a:	99 81       	ldd	r25, Y+1	; 0x01
    1a6c:	84 0f       	add	r24, r20
    1a6e:	95 1f       	adc	r25, r21
    1a70:	02 96       	adiw	r24, 0x02	; 2
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	93 83       	std	Z+3, r25	; 0x03
    1a7c:	82 83       	std	Z+2, r24	; 0x02
    1a7e:	21 15       	cp	r18, r1
    1a80:	31 05       	cpc	r19, r1
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <free+0x92>
    1a84:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__flp+0x1>
    1a88:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__flp>
    1a8c:	3d c0       	rjmp	.+122    	; 0x1b08 <free+0x10c>
    1a8e:	e9 01       	movw	r28, r18
    1a90:	fb 83       	std	Y+3, r31	; 0x03
    1a92:	ea 83       	std	Y+2, r30	; 0x02
    1a94:	49 91       	ld	r20, Y+
    1a96:	59 91       	ld	r21, Y+
    1a98:	c4 0f       	add	r28, r20
    1a9a:	d5 1f       	adc	r29, r21
    1a9c:	ec 17       	cp	r30, r28
    1a9e:	fd 07       	cpc	r31, r29
    1aa0:	61 f4       	brne	.+24     	; 0x1aba <free+0xbe>
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	84 0f       	add	r24, r20
    1aa8:	95 1f       	adc	r25, r21
    1aaa:	02 96       	adiw	r24, 0x02	; 2
    1aac:	e9 01       	movw	r28, r18
    1aae:	99 83       	std	Y+1, r25	; 0x01
    1ab0:	88 83       	st	Y, r24
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	9b 83       	std	Y+3, r25	; 0x03
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	e0 e0       	ldi	r30, 0x00	; 0
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	8d 91       	ld	r24, X+
    1ac2:	9c 91       	ld	r25, X
    1ac4:	13 97       	sbiw	r26, 0x03	; 3
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <free+0xd4>
    1aca:	fd 01       	movw	r30, r26
    1acc:	dc 01       	movw	r26, r24
    1ace:	f7 cf       	rjmp	.-18     	; 0x1abe <free+0xc2>
    1ad0:	8d 91       	ld	r24, X+
    1ad2:	9c 91       	ld	r25, X
    1ad4:	11 97       	sbiw	r26, 0x01	; 1
    1ad6:	9d 01       	movw	r18, r26
    1ad8:	2e 5f       	subi	r18, 0xFE	; 254
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <__brkval>
    1ae4:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <__brkval+0x1>
    1ae8:	28 17       	cp	r18, r24
    1aea:	39 07       	cpc	r19, r25
    1aec:	69 f4       	brne	.+26     	; 0x1b08 <free+0x10c>
    1aee:	30 97       	sbiw	r30, 0x00	; 0
    1af0:	29 f4       	brne	.+10     	; 0x1afc <free+0x100>
    1af2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <__flp+0x1>
    1af6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__flp>
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <free+0x104>
    1afc:	13 82       	std	Z+3, r1	; 0x03
    1afe:	12 82       	std	Z+2, r1	; 0x02
    1b00:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <__brkval+0x1>
    1b04:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <__brkval>
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <strcat>:
    1b0e:	fb 01       	movw	r30, r22
    1b10:	dc 01       	movw	r26, r24
    1b12:	0d 90       	ld	r0, X+
    1b14:	00 20       	and	r0, r0
    1b16:	e9 f7       	brne	.-6      	; 0x1b12 <strcat+0x4>
    1b18:	11 97       	sbiw	r26, 0x01	; 1
    1b1a:	01 90       	ld	r0, Z+
    1b1c:	0d 92       	st	X+, r0
    1b1e:	00 20       	and	r0, r0
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <strcat+0xc>
    1b22:	08 95       	ret

00001b24 <strcpy>:
    1b24:	fb 01       	movw	r30, r22
    1b26:	dc 01       	movw	r26, r24
    1b28:	01 90       	ld	r0, Z+
    1b2a:	0d 92       	st	X+, r0
    1b2c:	00 20       	and	r0, r0
    1b2e:	e1 f7       	brne	.-8      	; 0x1b28 <strcpy+0x4>
    1b30:	08 95       	ret

00001b32 <fdevopen>:
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	31 f4       	brne	.+12     	; 0x1b4a <fdevopen+0x18>
    1b3e:	61 15       	cp	r22, r1
    1b40:	71 05       	cpc	r23, r1
    1b42:	19 f4       	brne	.+6      	; 0x1b4a <fdevopen+0x18>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	3a c0       	rjmp	.+116    	; 0x1bbe <fdevopen+0x8c>
    1b4a:	8b 01       	movw	r16, r22
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	6e e0       	ldi	r22, 0x0E	; 14
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 2d 10 	call	0x205a	; 0x205a <calloc>
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	89 2b       	or	r24, r25
    1b5e:	91 f3       	breq	.-28     	; 0x1b44 <fdevopen+0x12>
    1b60:	80 e8       	ldi	r24, 0x80	; 128
    1b62:	83 83       	std	Z+3, r24	; 0x03
    1b64:	01 15       	cp	r16, r1
    1b66:	11 05       	cpc	r17, r1
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <fdevopen+0x54>
    1b6a:	13 87       	std	Z+11, r17	; 0x0b
    1b6c:	02 87       	std	Z+10, r16	; 0x0a
    1b6e:	81 e8       	ldi	r24, 0x81	; 129
    1b70:	83 83       	std	Z+3, r24	; 0x03
    1b72:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__iob>
    1b76:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__iob+0x1>
    1b7a:	89 2b       	or	r24, r25
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <fdevopen+0x54>
    1b7e:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__iob+0x1>
    1b82:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__iob>
    1b86:	20 97       	sbiw	r28, 0x00	; 0
    1b88:	c9 f0       	breq	.+50     	; 0x1bbc <fdevopen+0x8a>
    1b8a:	d1 87       	std	Z+9, r29	; 0x09
    1b8c:	c0 87       	std	Z+8, r28	; 0x08
    1b8e:	83 81       	ldd	r24, Z+3	; 0x03
    1b90:	82 60       	ori	r24, 0x02	; 2
    1b92:	83 83       	std	Z+3, r24	; 0x03
    1b94:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__iob+0x2>
    1b98:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__iob+0x3>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	71 f4       	brne	.+28     	; 0x1bbc <fdevopen+0x8a>
    1ba0:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__iob+0x3>
    1ba4:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__iob+0x2>
    1ba8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__iob+0x4>
    1bac:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__iob+0x5>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <fdevopen+0x8a>
    1bb4:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__iob+0x5>
    1bb8:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__iob+0x4>
    1bbc:	cf 01       	movw	r24, r30
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <printf>:
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ea ee       	ldi	r30, 0xEA	; 234
    1bce:	fd e0       	ldi	r31, 0x0D	; 13
    1bd0:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__prologue_saves__+0x20>
    1bd4:	ae 01       	movw	r20, r28
    1bd6:	4b 5f       	subi	r20, 0xFB	; 251
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bda:	fa 01       	movw	r30, r20
    1bdc:	61 91       	ld	r22, Z+
    1bde:	71 91       	ld	r23, Z+
    1be0:	af 01       	movw	r20, r30
    1be2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__iob+0x2>
    1be6:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__iob+0x3>
    1bea:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <vfprintf>
    1bee:	e2 e0       	ldi	r30, 0x02	; 2
    1bf0:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__epilogue_restores__+0x20>

00001bf4 <puts>:
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__iob+0x2>
    1c00:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__iob+0x3>
    1c04:	23 81       	ldd	r18, Z+3	; 0x03
    1c06:	21 ff       	sbrs	r18, 1
    1c08:	1b c0       	rjmp	.+54     	; 0x1c40 <puts+0x4c>
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	d0 e0       	ldi	r29, 0x00	; 0
    1c0e:	c0 e0       	ldi	r28, 0x00	; 0
    1c10:	f8 01       	movw	r30, r16
    1c12:	81 91       	ld	r24, Z+
    1c14:	8f 01       	movw	r16, r30
    1c16:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <__iob+0x2>
    1c1a:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <__iob+0x3>
    1c1e:	db 01       	movw	r26, r22
    1c20:	18 96       	adiw	r26, 0x08	; 8
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	19 97       	sbiw	r26, 0x09	; 9
    1c28:	88 23       	and	r24, r24
    1c2a:	31 f0       	breq	.+12     	; 0x1c38 <puts+0x44>
    1c2c:	09 95       	icall
    1c2e:	89 2b       	or	r24, r25
    1c30:	79 f3       	breq	.-34     	; 0x1c10 <puts+0x1c>
    1c32:	df ef       	ldi	r29, 0xFF	; 255
    1c34:	cf ef       	ldi	r28, 0xFF	; 255
    1c36:	ec cf       	rjmp	.-40     	; 0x1c10 <puts+0x1c>
    1c38:	8a e0       	ldi	r24, 0x0A	; 10
    1c3a:	09 95       	icall
    1c3c:	89 2b       	or	r24, r25
    1c3e:	19 f0       	breq	.+6      	; 0x1c46 <puts+0x52>
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	9f ef       	ldi	r25, 0xFF	; 255
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <puts+0x56>
    1c46:	8d 2f       	mov	r24, r29
    1c48:	9c 2f       	mov	r25, r28
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	08 95       	ret

00001c54 <sprintf>:
    1c54:	ae e0       	ldi	r26, 0x0E	; 14
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	fe e0       	ldi	r31, 0x0E	; 14
    1c5c:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__prologue_saves__+0x1c>
    1c60:	0d 89       	ldd	r16, Y+21	; 0x15
    1c62:	1e 89       	ldd	r17, Y+22	; 0x16
    1c64:	86 e0       	ldi	r24, 0x06	; 6
    1c66:	8c 83       	std	Y+4, r24	; 0x04
    1c68:	1a 83       	std	Y+2, r17	; 0x02
    1c6a:	09 83       	std	Y+1, r16	; 0x01
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9f e7       	ldi	r25, 0x7F	; 127
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	ae 01       	movw	r20, r28
    1c76:	47 5e       	subi	r20, 0xE7	; 231
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	6f 89       	ldd	r22, Y+23	; 0x17
    1c7c:	78 8d       	ldd	r23, Y+24	; 0x18
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <vfprintf>
    1c86:	ef 81       	ldd	r30, Y+7	; 0x07
    1c88:	f8 85       	ldd	r31, Y+8	; 0x08
    1c8a:	e0 0f       	add	r30, r16
    1c8c:	f1 1f       	adc	r31, r17
    1c8e:	10 82       	st	Z, r1
    1c90:	2e 96       	adiw	r28, 0x0e	; 14
    1c92:	e4 e0       	ldi	r30, 0x04	; 4
    1c94:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__epilogue_restores__+0x1c>

00001c98 <vfprintf>:
    1c98:	ab e0       	ldi	r26, 0x0B	; 11
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e5       	ldi	r30, 0x52	; 82
    1c9e:	fe e0       	ldi	r31, 0x0E	; 14
    1ca0:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__>
    1ca4:	6c 01       	movw	r12, r24
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	8a 01       	movw	r16, r20
    1caa:	fc 01       	movw	r30, r24
    1cac:	17 82       	std	Z+7, r1	; 0x07
    1cae:	16 82       	std	Z+6, r1	; 0x06
    1cb0:	83 81       	ldd	r24, Z+3	; 0x03
    1cb2:	81 ff       	sbrs	r24, 1
    1cb4:	cc c1       	rjmp	.+920    	; 0x204e <vfprintf+0x3b6>
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	3c 01       	movw	r6, r24
    1cbc:	f6 01       	movw	r30, r12
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	f7 01       	movw	r30, r14
    1cc2:	93 fd       	sbrc	r25, 3
    1cc4:	85 91       	lpm	r24, Z+
    1cc6:	93 ff       	sbrs	r25, 3
    1cc8:	81 91       	ld	r24, Z+
    1cca:	7f 01       	movw	r14, r30
    1ccc:	88 23       	and	r24, r24
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <vfprintf+0x3a>
    1cd0:	ba c1       	rjmp	.+884    	; 0x2046 <vfprintf+0x3ae>
    1cd2:	85 32       	cpi	r24, 0x25	; 37
    1cd4:	39 f4       	brne	.+14     	; 0x1ce4 <vfprintf+0x4c>
    1cd6:	93 fd       	sbrc	r25, 3
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	93 ff       	sbrs	r25, 3
    1cdc:	81 91       	ld	r24, Z+
    1cde:	7f 01       	movw	r14, r30
    1ce0:	85 32       	cpi	r24, 0x25	; 37
    1ce2:	29 f4       	brne	.+10     	; 0x1cee <vfprintf+0x56>
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    1cec:	e7 cf       	rjmp	.-50     	; 0x1cbc <vfprintf+0x24>
    1cee:	91 2c       	mov	r9, r1
    1cf0:	21 2c       	mov	r2, r1
    1cf2:	31 2c       	mov	r3, r1
    1cf4:	ff e1       	ldi	r31, 0x1F	; 31
    1cf6:	f3 15       	cp	r31, r3
    1cf8:	d8 f0       	brcs	.+54     	; 0x1d30 <vfprintf+0x98>
    1cfa:	8b 32       	cpi	r24, 0x2B	; 43
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <vfprintf+0x84>
    1cfe:	38 f4       	brcc	.+14     	; 0x1d0e <vfprintf+0x76>
    1d00:	80 32       	cpi	r24, 0x20	; 32
    1d02:	79 f0       	breq	.+30     	; 0x1d22 <vfprintf+0x8a>
    1d04:	83 32       	cpi	r24, 0x23	; 35
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <vfprintf+0x98>
    1d08:	23 2d       	mov	r18, r3
    1d0a:	20 61       	ori	r18, 0x10	; 16
    1d0c:	1d c0       	rjmp	.+58     	; 0x1d48 <vfprintf+0xb0>
    1d0e:	8d 32       	cpi	r24, 0x2D	; 45
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <vfprintf+0x92>
    1d12:	80 33       	cpi	r24, 0x30	; 48
    1d14:	69 f4       	brne	.+26     	; 0x1d30 <vfprintf+0x98>
    1d16:	23 2d       	mov	r18, r3
    1d18:	21 60       	ori	r18, 0x01	; 1
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <vfprintf+0xb0>
    1d1c:	83 2d       	mov	r24, r3
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	38 2e       	mov	r3, r24
    1d22:	e3 2d       	mov	r30, r3
    1d24:	e4 60       	ori	r30, 0x04	; 4
    1d26:	3e 2e       	mov	r3, r30
    1d28:	2a c0       	rjmp	.+84     	; 0x1d7e <vfprintf+0xe6>
    1d2a:	f3 2d       	mov	r31, r3
    1d2c:	f8 60       	ori	r31, 0x08	; 8
    1d2e:	1d c0       	rjmp	.+58     	; 0x1d6a <vfprintf+0xd2>
    1d30:	37 fc       	sbrc	r3, 7
    1d32:	2d c0       	rjmp	.+90     	; 0x1d8e <vfprintf+0xf6>
    1d34:	20 ed       	ldi	r18, 0xD0	; 208
    1d36:	28 0f       	add	r18, r24
    1d38:	2a 30       	cpi	r18, 0x0A	; 10
    1d3a:	40 f0       	brcs	.+16     	; 0x1d4c <vfprintf+0xb4>
    1d3c:	8e 32       	cpi	r24, 0x2E	; 46
    1d3e:	b9 f4       	brne	.+46     	; 0x1d6e <vfprintf+0xd6>
    1d40:	36 fc       	sbrc	r3, 6
    1d42:	81 c1       	rjmp	.+770    	; 0x2046 <vfprintf+0x3ae>
    1d44:	23 2d       	mov	r18, r3
    1d46:	20 64       	ori	r18, 0x40	; 64
    1d48:	32 2e       	mov	r3, r18
    1d4a:	19 c0       	rjmp	.+50     	; 0x1d7e <vfprintf+0xe6>
    1d4c:	36 fe       	sbrs	r3, 6
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <vfprintf+0xc4>
    1d50:	8a e0       	ldi	r24, 0x0A	; 10
    1d52:	98 9e       	mul	r9, r24
    1d54:	20 0d       	add	r18, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	92 2e       	mov	r9, r18
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <vfprintf+0xe6>
    1d5c:	ea e0       	ldi	r30, 0x0A	; 10
    1d5e:	2e 9e       	mul	r2, r30
    1d60:	20 0d       	add	r18, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	22 2e       	mov	r2, r18
    1d66:	f3 2d       	mov	r31, r3
    1d68:	f0 62       	ori	r31, 0x20	; 32
    1d6a:	3f 2e       	mov	r3, r31
    1d6c:	08 c0       	rjmp	.+16     	; 0x1d7e <vfprintf+0xe6>
    1d6e:	8c 36       	cpi	r24, 0x6C	; 108
    1d70:	21 f4       	brne	.+8      	; 0x1d7a <vfprintf+0xe2>
    1d72:	83 2d       	mov	r24, r3
    1d74:	80 68       	ori	r24, 0x80	; 128
    1d76:	38 2e       	mov	r3, r24
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <vfprintf+0xe6>
    1d7a:	88 36       	cpi	r24, 0x68	; 104
    1d7c:	41 f4       	brne	.+16     	; 0x1d8e <vfprintf+0xf6>
    1d7e:	f7 01       	movw	r30, r14
    1d80:	93 fd       	sbrc	r25, 3
    1d82:	85 91       	lpm	r24, Z+
    1d84:	93 ff       	sbrs	r25, 3
    1d86:	81 91       	ld	r24, Z+
    1d88:	7f 01       	movw	r14, r30
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	b3 cf       	rjmp	.-154    	; 0x1cf4 <vfprintf+0x5c>
    1d8e:	98 2f       	mov	r25, r24
    1d90:	9f 7d       	andi	r25, 0xDF	; 223
    1d92:	95 54       	subi	r25, 0x45	; 69
    1d94:	93 30       	cpi	r25, 0x03	; 3
    1d96:	28 f4       	brcc	.+10     	; 0x1da2 <vfprintf+0x10a>
    1d98:	0c 5f       	subi	r16, 0xFC	; 252
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	9f e3       	ldi	r25, 0x3F	; 63
    1d9e:	99 83       	std	Y+1, r25	; 0x01
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <vfprintf+0x124>
    1da2:	83 36       	cpi	r24, 0x63	; 99
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <vfprintf+0x11a>
    1da6:	83 37       	cpi	r24, 0x73	; 115
    1da8:	71 f0       	breq	.+28     	; 0x1dc6 <vfprintf+0x12e>
    1daa:	83 35       	cpi	r24, 0x53	; 83
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <vfprintf+0x118>
    1dae:	59 c0       	rjmp	.+178    	; 0x1e62 <vfprintf+0x1ca>
    1db0:	21 c0       	rjmp	.+66     	; 0x1df4 <vfprintf+0x15c>
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 81       	ld	r24, Z
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	0e 5f       	subi	r16, 0xFE	; 254
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	88 24       	eor	r8, r8
    1dbe:	83 94       	inc	r8
    1dc0:	91 2c       	mov	r9, r1
    1dc2:	53 01       	movw	r10, r6
    1dc4:	13 c0       	rjmp	.+38     	; 0x1dec <vfprintf+0x154>
    1dc6:	28 01       	movw	r4, r16
    1dc8:	f2 e0       	ldi	r31, 0x02	; 2
    1dca:	4f 0e       	add	r4, r31
    1dcc:	51 1c       	adc	r5, r1
    1dce:	f8 01       	movw	r30, r16
    1dd0:	a0 80       	ld	r10, Z
    1dd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd4:	36 fe       	sbrs	r3, 6
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <vfprintf+0x146>
    1dd8:	69 2d       	mov	r22, r9
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <vfprintf+0x14a>
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	7f ef       	ldi	r23, 0xFF	; 255
    1de2:	c5 01       	movw	r24, r10
    1de4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <strnlen>
    1de8:	4c 01       	movw	r8, r24
    1dea:	82 01       	movw	r16, r4
    1dec:	f3 2d       	mov	r31, r3
    1dee:	ff 77       	andi	r31, 0x7F	; 127
    1df0:	3f 2e       	mov	r3, r31
    1df2:	16 c0       	rjmp	.+44     	; 0x1e20 <vfprintf+0x188>
    1df4:	28 01       	movw	r4, r16
    1df6:	22 e0       	ldi	r18, 0x02	; 2
    1df8:	42 0e       	add	r4, r18
    1dfa:	51 1c       	adc	r5, r1
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	a0 80       	ld	r10, Z
    1e00:	b1 80       	ldd	r11, Z+1	; 0x01
    1e02:	36 fe       	sbrs	r3, 6
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <vfprintf+0x174>
    1e06:	69 2d       	mov	r22, r9
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <vfprintf+0x178>
    1e0c:	6f ef       	ldi	r22, 0xFF	; 255
    1e0e:	7f ef       	ldi	r23, 0xFF	; 255
    1e10:	c5 01       	movw	r24, r10
    1e12:	0e 94 49 10 	call	0x2092	; 0x2092 <strnlen_P>
    1e16:	4c 01       	movw	r8, r24
    1e18:	f3 2d       	mov	r31, r3
    1e1a:	f0 68       	ori	r31, 0x80	; 128
    1e1c:	3f 2e       	mov	r3, r31
    1e1e:	82 01       	movw	r16, r4
    1e20:	33 fc       	sbrc	r3, 3
    1e22:	1b c0       	rjmp	.+54     	; 0x1e5a <vfprintf+0x1c2>
    1e24:	82 2d       	mov	r24, r2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	88 16       	cp	r8, r24
    1e2a:	99 06       	cpc	r9, r25
    1e2c:	b0 f4       	brcc	.+44     	; 0x1e5a <vfprintf+0x1c2>
    1e2e:	b6 01       	movw	r22, r12
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    1e38:	2a 94       	dec	r2
    1e3a:	f4 cf       	rjmp	.-24     	; 0x1e24 <vfprintf+0x18c>
    1e3c:	f5 01       	movw	r30, r10
    1e3e:	37 fc       	sbrc	r3, 7
    1e40:	85 91       	lpm	r24, Z+
    1e42:	37 fe       	sbrs	r3, 7
    1e44:	81 91       	ld	r24, Z+
    1e46:	5f 01       	movw	r10, r30
    1e48:	b6 01       	movw	r22, r12
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    1e50:	21 10       	cpse	r2, r1
    1e52:	2a 94       	dec	r2
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	82 1a       	sub	r8, r18
    1e58:	91 08       	sbc	r9, r1
    1e5a:	81 14       	cp	r8, r1
    1e5c:	91 04       	cpc	r9, r1
    1e5e:	71 f7       	brne	.-36     	; 0x1e3c <vfprintf+0x1a4>
    1e60:	e8 c0       	rjmp	.+464    	; 0x2032 <vfprintf+0x39a>
    1e62:	84 36       	cpi	r24, 0x64	; 100
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <vfprintf+0x1d2>
    1e66:	89 36       	cpi	r24, 0x69	; 105
    1e68:	41 f5       	brne	.+80     	; 0x1eba <vfprintf+0x222>
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	37 fe       	sbrs	r3, 7
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <vfprintf+0x1e6>
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	0c 5f       	subi	r16, 0xFC	; 252
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	08 c0       	rjmp	.+16     	; 0x1e8e <vfprintf+0x1f6>
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	07 2e       	mov	r0, r23
    1e84:	00 0c       	add	r0, r0
    1e86:	88 0b       	sbc	r24, r24
    1e88:	99 0b       	sbc	r25, r25
    1e8a:	0e 5f       	subi	r16, 0xFE	; 254
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	f3 2d       	mov	r31, r3
    1e90:	ff 76       	andi	r31, 0x6F	; 111
    1e92:	3f 2e       	mov	r3, r31
    1e94:	97 ff       	sbrs	r25, 7
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <vfprintf+0x212>
    1e98:	90 95       	com	r25
    1e9a:	80 95       	com	r24
    1e9c:	70 95       	com	r23
    1e9e:	61 95       	neg	r22
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea6:	f0 68       	ori	r31, 0x80	; 128
    1ea8:	3f 2e       	mov	r3, r31
    1eaa:	2a e0       	ldi	r18, 0x0A	; 10
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	a3 01       	movw	r20, r6
    1eb0:	0e 94 a2 10 	call	0x2144	; 0x2144 <__ultoa_invert>
    1eb4:	88 2e       	mov	r8, r24
    1eb6:	86 18       	sub	r8, r6
    1eb8:	45 c0       	rjmp	.+138    	; 0x1f44 <vfprintf+0x2ac>
    1eba:	85 37       	cpi	r24, 0x75	; 117
    1ebc:	31 f4       	brne	.+12     	; 0x1eca <vfprintf+0x232>
    1ebe:	23 2d       	mov	r18, r3
    1ec0:	2f 7e       	andi	r18, 0xEF	; 239
    1ec2:	b2 2e       	mov	r11, r18
    1ec4:	2a e0       	ldi	r18, 0x0A	; 10
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	25 c0       	rjmp	.+74     	; 0x1f14 <vfprintf+0x27c>
    1eca:	93 2d       	mov	r25, r3
    1ecc:	99 7f       	andi	r25, 0xF9	; 249
    1ece:	b9 2e       	mov	r11, r25
    1ed0:	8f 36       	cpi	r24, 0x6F	; 111
    1ed2:	c1 f0       	breq	.+48     	; 0x1f04 <vfprintf+0x26c>
    1ed4:	18 f4       	brcc	.+6      	; 0x1edc <vfprintf+0x244>
    1ed6:	88 35       	cpi	r24, 0x58	; 88
    1ed8:	79 f0       	breq	.+30     	; 0x1ef8 <vfprintf+0x260>
    1eda:	b5 c0       	rjmp	.+362    	; 0x2046 <vfprintf+0x3ae>
    1edc:	80 37       	cpi	r24, 0x70	; 112
    1ede:	19 f0       	breq	.+6      	; 0x1ee6 <vfprintf+0x24e>
    1ee0:	88 37       	cpi	r24, 0x78	; 120
    1ee2:	21 f0       	breq	.+8      	; 0x1eec <vfprintf+0x254>
    1ee4:	b0 c0       	rjmp	.+352    	; 0x2046 <vfprintf+0x3ae>
    1ee6:	e9 2f       	mov	r30, r25
    1ee8:	e0 61       	ori	r30, 0x10	; 16
    1eea:	be 2e       	mov	r11, r30
    1eec:	b4 fe       	sbrs	r11, 4
    1eee:	0d c0       	rjmp	.+26     	; 0x1f0a <vfprintf+0x272>
    1ef0:	fb 2d       	mov	r31, r11
    1ef2:	f4 60       	ori	r31, 0x04	; 4
    1ef4:	bf 2e       	mov	r11, r31
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <vfprintf+0x272>
    1ef8:	34 fe       	sbrs	r3, 4
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <vfprintf+0x278>
    1efc:	29 2f       	mov	r18, r25
    1efe:	26 60       	ori	r18, 0x06	; 6
    1f00:	b2 2e       	mov	r11, r18
    1f02:	06 c0       	rjmp	.+12     	; 0x1f10 <vfprintf+0x278>
    1f04:	28 e0       	ldi	r18, 0x08	; 8
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <vfprintf+0x27c>
    1f0a:	20 e1       	ldi	r18, 0x10	; 16
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <vfprintf+0x27c>
    1f10:	20 e1       	ldi	r18, 0x10	; 16
    1f12:	32 e0       	ldi	r19, 0x02	; 2
    1f14:	f8 01       	movw	r30, r16
    1f16:	b7 fe       	sbrs	r11, 7
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <vfprintf+0x290>
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	0c 5f       	subi	r16, 0xFC	; 252
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	06 c0       	rjmp	.+12     	; 0x1f34 <vfprintf+0x29c>
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 5f       	subi	r16, 0xFE	; 254
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	a3 01       	movw	r20, r6
    1f36:	0e 94 a2 10 	call	0x2144	; 0x2144 <__ultoa_invert>
    1f3a:	88 2e       	mov	r8, r24
    1f3c:	86 18       	sub	r8, r6
    1f3e:	fb 2d       	mov	r31, r11
    1f40:	ff 77       	andi	r31, 0x7F	; 127
    1f42:	3f 2e       	mov	r3, r31
    1f44:	36 fe       	sbrs	r3, 6
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <vfprintf+0x2ca>
    1f48:	23 2d       	mov	r18, r3
    1f4a:	2e 7f       	andi	r18, 0xFE	; 254
    1f4c:	a2 2e       	mov	r10, r18
    1f4e:	89 14       	cp	r8, r9
    1f50:	58 f4       	brcc	.+22     	; 0x1f68 <vfprintf+0x2d0>
    1f52:	34 fe       	sbrs	r3, 4
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <vfprintf+0x2d4>
    1f56:	32 fc       	sbrc	r3, 2
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <vfprintf+0x2d4>
    1f5a:	83 2d       	mov	r24, r3
    1f5c:	8e 7e       	andi	r24, 0xEE	; 238
    1f5e:	a8 2e       	mov	r10, r24
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <vfprintf+0x2d4>
    1f62:	b8 2c       	mov	r11, r8
    1f64:	a3 2c       	mov	r10, r3
    1f66:	03 c0       	rjmp	.+6      	; 0x1f6e <vfprintf+0x2d6>
    1f68:	b8 2c       	mov	r11, r8
    1f6a:	01 c0       	rjmp	.+2      	; 0x1f6e <vfprintf+0x2d6>
    1f6c:	b9 2c       	mov	r11, r9
    1f6e:	a4 fe       	sbrs	r10, 4
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <vfprintf+0x2f8>
    1f72:	fe 01       	movw	r30, r28
    1f74:	e8 0d       	add	r30, r8
    1f76:	f1 1d       	adc	r31, r1
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 33       	cpi	r24, 0x30	; 48
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <vfprintf+0x2ee>
    1f7e:	9a 2d       	mov	r25, r10
    1f80:	99 7e       	andi	r25, 0xE9	; 233
    1f82:	a9 2e       	mov	r10, r25
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <vfprintf+0x300>
    1f86:	a2 fe       	sbrs	r10, 2
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <vfprintf+0x2fe>
    1f8a:	b3 94       	inc	r11
    1f8c:	b3 94       	inc	r11
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <vfprintf+0x300>
    1f90:	8a 2d       	mov	r24, r10
    1f92:	86 78       	andi	r24, 0x86	; 134
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <vfprintf+0x300>
    1f96:	b3 94       	inc	r11
    1f98:	a3 fc       	sbrc	r10, 3
    1f9a:	11 c0       	rjmp	.+34     	; 0x1fbe <vfprintf+0x326>
    1f9c:	a0 fe       	sbrs	r10, 0
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <vfprintf+0x314>
    1fa0:	b2 14       	cp	r11, r2
    1fa2:	88 f4       	brcc	.+34     	; 0x1fc6 <vfprintf+0x32e>
    1fa4:	28 0c       	add	r2, r8
    1fa6:	92 2c       	mov	r9, r2
    1fa8:	9b 18       	sub	r9, r11
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <vfprintf+0x330>
    1fac:	b2 14       	cp	r11, r2
    1fae:	60 f4       	brcc	.+24     	; 0x1fc8 <vfprintf+0x330>
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    1fba:	b3 94       	inc	r11
    1fbc:	f7 cf       	rjmp	.-18     	; 0x1fac <vfprintf+0x314>
    1fbe:	b2 14       	cp	r11, r2
    1fc0:	18 f4       	brcc	.+6      	; 0x1fc8 <vfprintf+0x330>
    1fc2:	2b 18       	sub	r2, r11
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <vfprintf+0x332>
    1fc6:	98 2c       	mov	r9, r8
    1fc8:	21 2c       	mov	r2, r1
    1fca:	a4 fe       	sbrs	r10, 4
    1fcc:	10 c0       	rjmp	.+32     	; 0x1fee <vfprintf+0x356>
    1fce:	b6 01       	movw	r22, r12
    1fd0:	80 e3       	ldi	r24, 0x30	; 48
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    1fd8:	a2 fe       	sbrs	r10, 2
    1fda:	17 c0       	rjmp	.+46     	; 0x200a <vfprintf+0x372>
    1fdc:	a1 fc       	sbrc	r10, 1
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <vfprintf+0x34e>
    1fe0:	88 e7       	ldi	r24, 0x78	; 120
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0x352>
    1fe6:	88 e5       	ldi	r24, 0x58	; 88
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	b6 01       	movw	r22, r12
    1fec:	0c c0       	rjmp	.+24     	; 0x2006 <vfprintf+0x36e>
    1fee:	8a 2d       	mov	r24, r10
    1ff0:	86 78       	andi	r24, 0x86	; 134
    1ff2:	59 f0       	breq	.+22     	; 0x200a <vfprintf+0x372>
    1ff4:	a1 fe       	sbrs	r10, 1
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <vfprintf+0x364>
    1ff8:	8b e2       	ldi	r24, 0x2B	; 43
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <vfprintf+0x366>
    1ffc:	80 e2       	ldi	r24, 0x20	; 32
    1ffe:	a7 fc       	sbrc	r10, 7
    2000:	8d e2       	ldi	r24, 0x2D	; 45
    2002:	b6 01       	movw	r22, r12
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    200a:	89 14       	cp	r8, r9
    200c:	38 f4       	brcc	.+14     	; 0x201c <vfprintf+0x384>
    200e:	b6 01       	movw	r22, r12
    2010:	80 e3       	ldi	r24, 0x30	; 48
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    2018:	9a 94       	dec	r9
    201a:	f7 cf       	rjmp	.-18     	; 0x200a <vfprintf+0x372>
    201c:	8a 94       	dec	r8
    201e:	f3 01       	movw	r30, r6
    2020:	e8 0d       	add	r30, r8
    2022:	f1 1d       	adc	r31, r1
    2024:	80 81       	ld	r24, Z
    2026:	b6 01       	movw	r22, r12
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    202e:	81 10       	cpse	r8, r1
    2030:	f5 cf       	rjmp	.-22     	; 0x201c <vfprintf+0x384>
    2032:	22 20       	and	r2, r2
    2034:	09 f4       	brne	.+2      	; 0x2038 <vfprintf+0x3a0>
    2036:	42 ce       	rjmp	.-892    	; 0x1cbc <vfprintf+0x24>
    2038:	b6 01       	movw	r22, r12
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 66 10 	call	0x20cc	; 0x20cc <fputc>
    2042:	2a 94       	dec	r2
    2044:	f6 cf       	rjmp	.-20     	; 0x2032 <vfprintf+0x39a>
    2046:	f6 01       	movw	r30, r12
    2048:	86 81       	ldd	r24, Z+6	; 0x06
    204a:	97 81       	ldd	r25, Z+7	; 0x07
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfprintf+0x3ba>
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	2b 96       	adiw	r28, 0x0b	; 11
    2054:	e2 e1       	ldi	r30, 0x12	; 18
    2056:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__>

0000205a <calloc>:
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	86 9f       	mul	r24, r22
    2064:	80 01       	movw	r16, r0
    2066:	87 9f       	mul	r24, r23
    2068:	10 0d       	add	r17, r0
    206a:	96 9f       	mul	r25, r22
    206c:	10 0d       	add	r17, r0
    206e:	11 24       	eor	r1, r1
    2070:	c8 01       	movw	r24, r16
    2072:	0e 94 66 0c 	call	0x18cc	; 0x18cc <malloc>
    2076:	ec 01       	movw	r28, r24
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <calloc+0x2c>
    207c:	a8 01       	movw	r20, r16
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	0e 94 54 10 	call	0x20a8	; 0x20a8 <memset>
    2086:	ce 01       	movw	r24, r28
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <strnlen_P>:
    2092:	fc 01       	movw	r30, r24
    2094:	05 90       	lpm	r0, Z+
    2096:	61 50       	subi	r22, 0x01	; 1
    2098:	70 40       	sbci	r23, 0x00	; 0
    209a:	01 10       	cpse	r0, r1
    209c:	d8 f7       	brcc	.-10     	; 0x2094 <strnlen_P+0x2>
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	8e 0f       	add	r24, r30
    20a4:	9f 1f       	adc	r25, r31
    20a6:	08 95       	ret

000020a8 <memset>:
    20a8:	dc 01       	movw	r26, r24
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <memset+0x6>
    20ac:	6d 93       	st	X+, r22
    20ae:	41 50       	subi	r20, 0x01	; 1
    20b0:	50 40       	sbci	r21, 0x00	; 0
    20b2:	e0 f7       	brcc	.-8      	; 0x20ac <memset+0x4>
    20b4:	08 95       	ret

000020b6 <strnlen>:
    20b6:	fc 01       	movw	r30, r24
    20b8:	61 50       	subi	r22, 0x01	; 1
    20ba:	70 40       	sbci	r23, 0x00	; 0
    20bc:	01 90       	ld	r0, Z+
    20be:	01 10       	cpse	r0, r1
    20c0:	d8 f7       	brcc	.-10     	; 0x20b8 <strnlen+0x2>
    20c2:	80 95       	com	r24
    20c4:	90 95       	com	r25
    20c6:	8e 0f       	add	r24, r30
    20c8:	9f 1f       	adc	r25, r31
    20ca:	08 95       	ret

000020cc <fputc>:
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	fb 01       	movw	r30, r22
    20d6:	23 81       	ldd	r18, Z+3	; 0x03
    20d8:	21 fd       	sbrc	r18, 1
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <fputc+0x16>
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	9f ef       	ldi	r25, 0xFF	; 255
    20e0:	2c c0       	rjmp	.+88     	; 0x213a <fputc+0x6e>
    20e2:	22 ff       	sbrs	r18, 2
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <fputc+0x46>
    20e6:	46 81       	ldd	r20, Z+6	; 0x06
    20e8:	57 81       	ldd	r21, Z+7	; 0x07
    20ea:	24 81       	ldd	r18, Z+4	; 0x04
    20ec:	35 81       	ldd	r19, Z+5	; 0x05
    20ee:	42 17       	cp	r20, r18
    20f0:	53 07       	cpc	r21, r19
    20f2:	44 f4       	brge	.+16     	; 0x2104 <fputc+0x38>
    20f4:	a0 81       	ld	r26, Z
    20f6:	b1 81       	ldd	r27, Z+1	; 0x01
    20f8:	9d 01       	movw	r18, r26
    20fa:	2f 5f       	subi	r18, 0xFF	; 255
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	31 83       	std	Z+1, r19	; 0x01
    2100:	20 83       	st	Z, r18
    2102:	8c 93       	st	X, r24
    2104:	26 81       	ldd	r18, Z+6	; 0x06
    2106:	37 81       	ldd	r19, Z+7	; 0x07
    2108:	2f 5f       	subi	r18, 0xFF	; 255
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	37 83       	std	Z+7, r19	; 0x07
    210e:	26 83       	std	Z+6, r18	; 0x06
    2110:	14 c0       	rjmp	.+40     	; 0x213a <fputc+0x6e>
    2112:	8b 01       	movw	r16, r22
    2114:	ec 01       	movw	r28, r24
    2116:	fb 01       	movw	r30, r22
    2118:	00 84       	ldd	r0, Z+8	; 0x08
    211a:	f1 85       	ldd	r31, Z+9	; 0x09
    211c:	e0 2d       	mov	r30, r0
    211e:	09 95       	icall
    2120:	89 2b       	or	r24, r25
    2122:	e1 f6       	brne	.-72     	; 0x20dc <fputc+0x10>
    2124:	d8 01       	movw	r26, r16
    2126:	16 96       	adiw	r26, 0x06	; 6
    2128:	8d 91       	ld	r24, X+
    212a:	9c 91       	ld	r25, X
    212c:	17 97       	sbiw	r26, 0x07	; 7
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	17 96       	adiw	r26, 0x07	; 7
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
    2136:	16 97       	sbiw	r26, 0x06	; 6
    2138:	ce 01       	movw	r24, r28
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	08 95       	ret

00002144 <__ultoa_invert>:
    2144:	fa 01       	movw	r30, r20
    2146:	aa 27       	eor	r26, r26
    2148:	28 30       	cpi	r18, 0x08	; 8
    214a:	51 f1       	breq	.+84     	; 0x21a0 <__ultoa_invert+0x5c>
    214c:	20 31       	cpi	r18, 0x10	; 16
    214e:	81 f1       	breq	.+96     	; 0x21b0 <__ultoa_invert+0x6c>
    2150:	e8 94       	clt
    2152:	6f 93       	push	r22
    2154:	6e 7f       	andi	r22, 0xFE	; 254
    2156:	6e 5f       	subi	r22, 0xFE	; 254
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	8f 4f       	sbci	r24, 0xFF	; 255
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	af 4f       	sbci	r26, 0xFF	; 255
    2160:	b1 e0       	ldi	r27, 0x01	; 1
    2162:	3e d0       	rcall	.+124    	; 0x21e0 <__ultoa_invert+0x9c>
    2164:	b4 e0       	ldi	r27, 0x04	; 4
    2166:	3c d0       	rcall	.+120    	; 0x21e0 <__ultoa_invert+0x9c>
    2168:	67 0f       	add	r22, r23
    216a:	78 1f       	adc	r23, r24
    216c:	89 1f       	adc	r24, r25
    216e:	9a 1f       	adc	r25, r26
    2170:	a1 1d       	adc	r26, r1
    2172:	68 0f       	add	r22, r24
    2174:	79 1f       	adc	r23, r25
    2176:	8a 1f       	adc	r24, r26
    2178:	91 1d       	adc	r25, r1
    217a:	a1 1d       	adc	r26, r1
    217c:	6a 0f       	add	r22, r26
    217e:	71 1d       	adc	r23, r1
    2180:	81 1d       	adc	r24, r1
    2182:	91 1d       	adc	r25, r1
    2184:	a1 1d       	adc	r26, r1
    2186:	20 d0       	rcall	.+64     	; 0x21c8 <__ultoa_invert+0x84>
    2188:	09 f4       	brne	.+2      	; 0x218c <__ultoa_invert+0x48>
    218a:	68 94       	set
    218c:	3f 91       	pop	r19
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	26 9f       	mul	r18, r22
    2192:	11 24       	eor	r1, r1
    2194:	30 19       	sub	r19, r0
    2196:	30 5d       	subi	r19, 0xD0	; 208
    2198:	31 93       	st	Z+, r19
    219a:	de f6       	brtc	.-74     	; 0x2152 <__ultoa_invert+0xe>
    219c:	cf 01       	movw	r24, r30
    219e:	08 95       	ret
    21a0:	46 2f       	mov	r20, r22
    21a2:	47 70       	andi	r20, 0x07	; 7
    21a4:	40 5d       	subi	r20, 0xD0	; 208
    21a6:	41 93       	st	Z+, r20
    21a8:	b3 e0       	ldi	r27, 0x03	; 3
    21aa:	0f d0       	rcall	.+30     	; 0x21ca <__ultoa_invert+0x86>
    21ac:	c9 f7       	brne	.-14     	; 0x21a0 <__ultoa_invert+0x5c>
    21ae:	f6 cf       	rjmp	.-20     	; 0x219c <__ultoa_invert+0x58>
    21b0:	46 2f       	mov	r20, r22
    21b2:	4f 70       	andi	r20, 0x0F	; 15
    21b4:	40 5d       	subi	r20, 0xD0	; 208
    21b6:	4a 33       	cpi	r20, 0x3A	; 58
    21b8:	18 f0       	brcs	.+6      	; 0x21c0 <__ultoa_invert+0x7c>
    21ba:	49 5d       	subi	r20, 0xD9	; 217
    21bc:	31 fd       	sbrc	r19, 1
    21be:	40 52       	subi	r20, 0x20	; 32
    21c0:	41 93       	st	Z+, r20
    21c2:	02 d0       	rcall	.+4      	; 0x21c8 <__ultoa_invert+0x84>
    21c4:	a9 f7       	brne	.-22     	; 0x21b0 <__ultoa_invert+0x6c>
    21c6:	ea cf       	rjmp	.-44     	; 0x219c <__ultoa_invert+0x58>
    21c8:	b4 e0       	ldi	r27, 0x04	; 4
    21ca:	a6 95       	lsr	r26
    21cc:	97 95       	ror	r25
    21ce:	87 95       	ror	r24
    21d0:	77 95       	ror	r23
    21d2:	67 95       	ror	r22
    21d4:	ba 95       	dec	r27
    21d6:	c9 f7       	brne	.-14     	; 0x21ca <__ultoa_invert+0x86>
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	61 05       	cpc	r22, r1
    21dc:	71 05       	cpc	r23, r1
    21de:	08 95       	ret
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	0a 2e       	mov	r0, r26
    21e6:	06 94       	lsr	r0
    21e8:	57 95       	ror	r21
    21ea:	47 95       	ror	r20
    21ec:	37 95       	ror	r19
    21ee:	27 95       	ror	r18
    21f0:	ba 95       	dec	r27
    21f2:	c9 f7       	brne	.-14     	; 0x21e6 <__ultoa_invert+0xa2>
    21f4:	62 0f       	add	r22, r18
    21f6:	73 1f       	adc	r23, r19
    21f8:	84 1f       	adc	r24, r20
    21fa:	95 1f       	adc	r25, r21
    21fc:	a0 1d       	adc	r26, r0
    21fe:	08 95       	ret

00002200 <__prologue_saves__>:
    2200:	2f 92       	push	r2
    2202:	3f 92       	push	r3
    2204:	4f 92       	push	r4
    2206:	5f 92       	push	r5
    2208:	6f 92       	push	r6
    220a:	7f 92       	push	r7
    220c:	8f 92       	push	r8
    220e:	9f 92       	push	r9
    2210:	af 92       	push	r10
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	ca 1b       	sub	r28, r26
    222a:	db 0b       	sbc	r29, r27
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	09 94       	ijmp

00002238 <__epilogue_restores__>:
    2238:	2a 88       	ldd	r2, Y+18	; 0x12
    223a:	39 88       	ldd	r3, Y+17	; 0x11
    223c:	48 88       	ldd	r4, Y+16	; 0x10
    223e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2240:	6e 84       	ldd	r6, Y+14	; 0x0e
    2242:	7d 84       	ldd	r7, Y+13	; 0x0d
    2244:	8c 84       	ldd	r8, Y+12	; 0x0c
    2246:	9b 84       	ldd	r9, Y+11	; 0x0b
    2248:	aa 84       	ldd	r10, Y+10	; 0x0a
    224a:	b9 84       	ldd	r11, Y+9	; 0x09
    224c:	c8 84       	ldd	r12, Y+8	; 0x08
    224e:	df 80       	ldd	r13, Y+7	; 0x07
    2250:	ee 80       	ldd	r14, Y+6	; 0x06
    2252:	fd 80       	ldd	r15, Y+5	; 0x05
    2254:	0c 81       	ldd	r16, Y+4	; 0x04
    2256:	1b 81       	ldd	r17, Y+3	; 0x03
    2258:	aa 81       	ldd	r26, Y+2	; 0x02
    225a:	b9 81       	ldd	r27, Y+1	; 0x01
    225c:	ce 0f       	add	r28, r30
    225e:	d1 1d       	adc	r29, r1
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	ed 01       	movw	r28, r26
    226c:	08 95       	ret

0000226e <_exit>:
    226e:	f8 94       	cli

00002270 <__stop_program>:
    2270:	ff cf       	rjmp	.-2      	; 0x2270 <__stop_program>
