
ping pong test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d5  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000182d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <init_UART>:

char uart_recieve() {
	while (! (UCSR1A & (1<<RXC1)));
	
	return UDR1;
}
  88:	9c bf       	out	0x3c, r25	; 60
  8a:	80 b9       	out	0x00, r24	; 0
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	81 b9       	out	0x01, r24	; 1
  90:	8e e8       	ldi	r24, 0x8E	; 142
  92:	8c bf       	out	0x3c, r24	; 60
  94:	08 95       	ret

00000096 <uart_send>:
  96:	15 9b       	sbis	0x02, 5	; 2
  98:	fe cf       	rjmp	.-4      	; 0x96 <uart_send>
  9a:	83 b9       	out	0x03, r24	; 3
  9c:	08 95       	ret

0000009e <main>:



int main(void)
{
	DDRA |= (1 << PA0);
  9e:	d0 9a       	sbi	0x1a, 0	; 26
	
	
	init_UART(MYUBRR);
  a0:	8f e1       	ldi	r24, 0x1F	; 31
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 44 00 	call	0x88	; 0x88 <init_UART>
	
	while(1) {
		uart_send('F');
		//uart_send_new('F');
		
		PORTA ^= 0x1 << PA0;
  a8:	c1 e0       	ldi	r28, 0x01	; 1
	//init_UART_new(MYUBRR);
	
	uint8_t i = 0;
	
	while(1) {
		uart_send('F');
  aa:	86 e4       	ldi	r24, 0x46	; 70
  ac:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send>
		//uart_send_new('F');
		
		PORTA ^= 0x1 << PA0;
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8c 27       	eor	r24, r28
  b4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e4       	ldi	r24, 0x4F	; 79
  b8:	93 ec       	ldi	r25, 0xC3	; 195
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x22>
  c0:	00 00       	nop
  c2:	f3 cf       	rjmp	.-26     	; 0xaa <main+0xc>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
